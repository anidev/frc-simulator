// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: frccomm.proto

#ifndef PROTOBUF_frccomm_2eproto__INCLUDED
#define PROTOBUF_frccomm_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace nc {
namespace frccomm {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_frccomm_2eproto();
void protobuf_AssignDesc_frccomm_2eproto();
void protobuf_ShutdownFile_frccomm_2eproto();

class CommonControlData;
class CommonControlData_ControlFlags;
class CommonControlData_Joystick;
class StatusData;
class ErrorData;
class DsLcdData;

// ===================================================================

class CommonControlData_ControlFlags : public ::google::protobuf::Message {
 public:
  CommonControlData_ControlFlags();
  virtual ~CommonControlData_ControlFlags();
  
  CommonControlData_ControlFlags(const CommonControlData_ControlFlags& from);
  
  inline CommonControlData_ControlFlags& operator=(const CommonControlData_ControlFlags& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonControlData_ControlFlags& default_instance();
  
  void Swap(CommonControlData_ControlFlags* other);
  
  // implements Message ----------------------------------------------
  
  CommonControlData_ControlFlags* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonControlData_ControlFlags& from);
  void MergeFrom(const CommonControlData_ControlFlags& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool reset = 1 [default = true];
  inline bool has_reset() const;
  inline void clear_reset();
  static const int kResetFieldNumber = 1;
  inline bool reset() const;
  inline void set_reset(bool value);
  
  // optional bool not_estop = 2 [default = true];
  inline bool has_not_estop() const;
  inline void clear_not_estop();
  static const int kNotEstopFieldNumber = 2;
  inline bool not_estop() const;
  inline void set_not_estop(bool value);
  
  // optional bool enabled = 3 [default = true];
  inline bool has_enabled() const;
  inline void clear_enabled();
  static const int kEnabledFieldNumber = 3;
  inline bool enabled() const;
  inline void set_enabled(bool value);
  
  // optional bool autonomous = 4 [default = true];
  inline bool has_autonomous() const;
  inline void clear_autonomous();
  static const int kAutonomousFieldNumber = 4;
  inline bool autonomous() const;
  inline void set_autonomous(bool value);
  
  // optional bool fms_attached = 5 [default = true];
  inline bool has_fms_attached() const;
  inline void clear_fms_attached();
  static const int kFmsAttachedFieldNumber = 5;
  inline bool fms_attached() const;
  inline void set_fms_attached(bool value);
  
  // optional bool resync = 6 [default = true];
  inline bool has_resync() const;
  inline void clear_resync();
  static const int kResyncFieldNumber = 6;
  inline bool resync() const;
  inline void set_resync(bool value);
  
  // optional bool crio_checksum = 7 [default = true];
  inline bool has_crio_checksum() const;
  inline void clear_crio_checksum();
  static const int kCrioChecksumFieldNumber = 7;
  inline bool crio_checksum() const;
  inline void set_crio_checksum(bool value);
  
  // optional bool fpga_checksum = 8 [default = true];
  inline bool has_fpga_checksum() const;
  inline void clear_fpga_checksum();
  static const int kFpgaChecksumFieldNumber = 8;
  inline bool fpga_checksum() const;
  inline void set_fpga_checksum(bool value);
  
  // @@protoc_insertion_point(class_scope:nc.frccomm.CommonControlData.ControlFlags)
 private:
  inline void set_has_reset();
  inline void clear_has_reset();
  inline void set_has_not_estop();
  inline void clear_has_not_estop();
  inline void set_has_enabled();
  inline void clear_has_enabled();
  inline void set_has_autonomous();
  inline void clear_has_autonomous();
  inline void set_has_fms_attached();
  inline void clear_has_fms_attached();
  inline void set_has_resync();
  inline void clear_has_resync();
  inline void set_has_crio_checksum();
  inline void clear_has_crio_checksum();
  inline void set_has_fpga_checksum();
  inline void clear_has_fpga_checksum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool reset_;
  bool not_estop_;
  bool enabled_;
  bool autonomous_;
  bool fms_attached_;
  bool resync_;
  bool crio_checksum_;
  bool fpga_checksum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];
  
  friend void  protobuf_AddDesc_frccomm_2eproto();
  friend void protobuf_AssignDesc_frccomm_2eproto();
  friend void protobuf_ShutdownFile_frccomm_2eproto();
  
  void InitAsDefaultInstance();
  static CommonControlData_ControlFlags* default_instance_;
};
// -------------------------------------------------------------------

class CommonControlData_Joystick : public ::google::protobuf::Message {
 public:
  CommonControlData_Joystick();
  virtual ~CommonControlData_Joystick();
  
  CommonControlData_Joystick(const CommonControlData_Joystick& from);
  
  inline CommonControlData_Joystick& operator=(const CommonControlData_Joystick& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonControlData_Joystick& default_instance();
  
  void Swap(CommonControlData_Joystick* other);
  
  // implements Message ----------------------------------------------
  
  CommonControlData_Joystick* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonControlData_Joystick& from);
  void MergeFrom(const CommonControlData_Joystick& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional sint32 axis1 = 1;
  inline bool has_axis1() const;
  inline void clear_axis1();
  static const int kAxis1FieldNumber = 1;
  inline ::google::protobuf::int32 axis1() const;
  inline void set_axis1(::google::protobuf::int32 value);
  
  // optional sint32 axis2 = 2;
  inline bool has_axis2() const;
  inline void clear_axis2();
  static const int kAxis2FieldNumber = 2;
  inline ::google::protobuf::int32 axis2() const;
  inline void set_axis2(::google::protobuf::int32 value);
  
  // optional sint32 axis3 = 3;
  inline bool has_axis3() const;
  inline void clear_axis3();
  static const int kAxis3FieldNumber = 3;
  inline ::google::protobuf::int32 axis3() const;
  inline void set_axis3(::google::protobuf::int32 value);
  
  // optional sint32 axis4 = 4;
  inline bool has_axis4() const;
  inline void clear_axis4();
  static const int kAxis4FieldNumber = 4;
  inline ::google::protobuf::int32 axis4() const;
  inline void set_axis4(::google::protobuf::int32 value);
  
  // optional sint32 axis5 = 5;
  inline bool has_axis5() const;
  inline void clear_axis5();
  static const int kAxis5FieldNumber = 5;
  inline ::google::protobuf::int32 axis5() const;
  inline void set_axis5(::google::protobuf::int32 value);
  
  // optional sint32 axis6 = 6;
  inline bool has_axis6() const;
  inline void clear_axis6();
  static const int kAxis6FieldNumber = 6;
  inline ::google::protobuf::int32 axis6() const;
  inline void set_axis6(::google::protobuf::int32 value);
  
  // optional uint32 buttons = 7;
  inline bool has_buttons() const;
  inline void clear_buttons();
  static const int kButtonsFieldNumber = 7;
  inline ::google::protobuf::uint32 buttons() const;
  inline void set_buttons(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nc.frccomm.CommonControlData.Joystick)
 private:
  inline void set_has_axis1();
  inline void clear_has_axis1();
  inline void set_has_axis2();
  inline void clear_has_axis2();
  inline void set_has_axis3();
  inline void clear_has_axis3();
  inline void set_has_axis4();
  inline void clear_has_axis4();
  inline void set_has_axis5();
  inline void clear_has_axis5();
  inline void set_has_axis6();
  inline void clear_has_axis6();
  inline void set_has_buttons();
  inline void clear_has_buttons();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::int32 axis1_;
  ::google::protobuf::int32 axis2_;
  ::google::protobuf::int32 axis3_;
  ::google::protobuf::int32 axis4_;
  ::google::protobuf::int32 axis5_;
  ::google::protobuf::int32 axis6_;
  ::google::protobuf::uint32 buttons_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_frccomm_2eproto();
  friend void protobuf_AssignDesc_frccomm_2eproto();
  friend void protobuf_ShutdownFile_frccomm_2eproto();
  
  void InitAsDefaultInstance();
  static CommonControlData_Joystick* default_instance_;
};
// -------------------------------------------------------------------

class CommonControlData : public ::google::protobuf::Message {
 public:
  CommonControlData();
  virtual ~CommonControlData();
  
  CommonControlData(const CommonControlData& from);
  
  inline CommonControlData& operator=(const CommonControlData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CommonControlData& default_instance();
  
  void Swap(CommonControlData* other);
  
  // implements Message ----------------------------------------------
  
  CommonControlData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CommonControlData& from);
  void MergeFrom(const CommonControlData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef CommonControlData_ControlFlags ControlFlags;
  typedef CommonControlData_Joystick Joystick;
  
  // accessors -------------------------------------------------------
  
  // required uint32 packet_index = 1;
  inline bool has_packet_index() const;
  inline void clear_packet_index();
  static const int kPacketIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 packet_index() const;
  inline void set_packet_index(::google::protobuf::uint32 value);
  
  // required .nc.frccomm.CommonControlData.ControlFlags control = 2;
  inline bool has_control() const;
  inline void clear_control();
  static const int kControlFieldNumber = 2;
  inline const ::nc::frccomm::CommonControlData_ControlFlags& control() const;
  inline ::nc::frccomm::CommonControlData_ControlFlags* mutable_control();
  inline ::nc::frccomm::CommonControlData_ControlFlags* release_control();
  
  // optional uint32 team_id = 3;
  inline bool has_team_id() const;
  inline void clear_team_id();
  static const int kTeamIdFieldNumber = 3;
  inline ::google::protobuf::uint32 team_id() const;
  inline void set_team_id(::google::protobuf::uint32 value);
  
  // optional uint32 ds_id_alliance = 4;
  inline bool has_ds_id_alliance() const;
  inline void clear_ds_id_alliance();
  static const int kDsIdAllianceFieldNumber = 4;
  inline ::google::protobuf::uint32 ds_id_alliance() const;
  inline void set_ds_id_alliance(::google::protobuf::uint32 value);
  
  // optional uint32 ds_id_position = 5;
  inline bool has_ds_id_position() const;
  inline void clear_ds_id_position();
  static const int kDsIdPositionFieldNumber = 5;
  inline ::google::protobuf::uint32 ds_id_position() const;
  inline void set_ds_id_position(::google::protobuf::uint32 value);
  
  // optional .nc.frccomm.CommonControlData.Joystick stick0 = 6;
  inline bool has_stick0() const;
  inline void clear_stick0();
  static const int kStick0FieldNumber = 6;
  inline const ::nc::frccomm::CommonControlData_Joystick& stick0() const;
  inline ::nc::frccomm::CommonControlData_Joystick* mutable_stick0();
  inline ::nc::frccomm::CommonControlData_Joystick* release_stick0();
  
  // optional .nc.frccomm.CommonControlData.Joystick stick1 = 7;
  inline bool has_stick1() const;
  inline void clear_stick1();
  static const int kStick1FieldNumber = 7;
  inline const ::nc::frccomm::CommonControlData_Joystick& stick1() const;
  inline ::nc::frccomm::CommonControlData_Joystick* mutable_stick1();
  inline ::nc::frccomm::CommonControlData_Joystick* release_stick1();
  
  // optional .nc.frccomm.CommonControlData.Joystick stick2 = 8;
  inline bool has_stick2() const;
  inline void clear_stick2();
  static const int kStick2FieldNumber = 8;
  inline const ::nc::frccomm::CommonControlData_Joystick& stick2() const;
  inline ::nc::frccomm::CommonControlData_Joystick* mutable_stick2();
  inline ::nc::frccomm::CommonControlData_Joystick* release_stick2();
  
  // optional .nc.frccomm.CommonControlData.Joystick stick3 = 9;
  inline bool has_stick3() const;
  inline void clear_stick3();
  static const int kStick3FieldNumber = 9;
  inline const ::nc::frccomm::CommonControlData_Joystick& stick3() const;
  inline ::nc::frccomm::CommonControlData_Joystick* mutable_stick3();
  inline ::nc::frccomm::CommonControlData_Joystick* release_stick3();
  
  // optional string version = 10;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 10;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  
  // optional uint32 ds_digital_in = 16;
  inline bool has_ds_digital_in() const;
  inline void clear_ds_digital_in();
  static const int kDsDigitalInFieldNumber = 16;
  inline ::google::protobuf::uint32 ds_digital_in() const;
  inline void set_ds_digital_in(::google::protobuf::uint32 value);
  
  // optional uint32 analog1 = 17;
  inline bool has_analog1() const;
  inline void clear_analog1();
  static const int kAnalog1FieldNumber = 17;
  inline ::google::protobuf::uint32 analog1() const;
  inline void set_analog1(::google::protobuf::uint32 value);
  
  // optional uint32 analog2 = 18;
  inline bool has_analog2() const;
  inline void clear_analog2();
  static const int kAnalog2FieldNumber = 18;
  inline ::google::protobuf::uint32 analog2() const;
  inline void set_analog2(::google::protobuf::uint32 value);
  
  // optional uint32 analog3 = 19;
  inline bool has_analog3() const;
  inline void clear_analog3();
  static const int kAnalog3FieldNumber = 19;
  inline ::google::protobuf::uint32 analog3() const;
  inline void set_analog3(::google::protobuf::uint32 value);
  
  // optional uint32 analog4 = 20;
  inline bool has_analog4() const;
  inline void clear_analog4();
  static const int kAnalog4FieldNumber = 20;
  inline ::google::protobuf::uint32 analog4() const;
  inline void set_analog4(::google::protobuf::uint32 value);
  
  // optional uint64 crio_checksum = 21;
  inline bool has_crio_checksum() const;
  inline void clear_crio_checksum();
  static const int kCrioChecksumFieldNumber = 21;
  inline ::google::protobuf::uint64 crio_checksum() const;
  inline void set_crio_checksum(::google::protobuf::uint64 value);
  
  // optional uint32 fpga_checksum1 = 22;
  inline bool has_fpga_checksum1() const;
  inline void clear_fpga_checksum1();
  static const int kFpgaChecksum1FieldNumber = 22;
  inline ::google::protobuf::uint32 fpga_checksum1() const;
  inline void set_fpga_checksum1(::google::protobuf::uint32 value);
  
  // optional uint32 fpga_checksum2 = 23;
  inline bool has_fpga_checksum2() const;
  inline void clear_fpga_checksum2();
  static const int kFpgaChecksum2FieldNumber = 23;
  inline ::google::protobuf::uint32 fpga_checksum2() const;
  inline void set_fpga_checksum2(::google::protobuf::uint32 value);
  
  // optional uint32 fpga_checksum3 = 24;
  inline bool has_fpga_checksum3() const;
  inline void clear_fpga_checksum3();
  static const int kFpgaChecksum3FieldNumber = 24;
  inline ::google::protobuf::uint32 fpga_checksum3() const;
  inline void set_fpga_checksum3(::google::protobuf::uint32 value);
  
  // optional uint32 fpga_checksum4 = 25;
  inline bool has_fpga_checksum4() const;
  inline void clear_fpga_checksum4();
  static const int kFpgaChecksum4FieldNumber = 25;
  inline ::google::protobuf::uint32 fpga_checksum4() const;
  inline void set_fpga_checksum4(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nc.frccomm.CommonControlData)
 private:
  inline void set_has_packet_index();
  inline void clear_has_packet_index();
  inline void set_has_control();
  inline void clear_has_control();
  inline void set_has_team_id();
  inline void clear_has_team_id();
  inline void set_has_ds_id_alliance();
  inline void clear_has_ds_id_alliance();
  inline void set_has_ds_id_position();
  inline void clear_has_ds_id_position();
  inline void set_has_stick0();
  inline void clear_has_stick0();
  inline void set_has_stick1();
  inline void clear_has_stick1();
  inline void set_has_stick2();
  inline void clear_has_stick2();
  inline void set_has_stick3();
  inline void clear_has_stick3();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_ds_digital_in();
  inline void clear_has_ds_digital_in();
  inline void set_has_analog1();
  inline void clear_has_analog1();
  inline void set_has_analog2();
  inline void clear_has_analog2();
  inline void set_has_analog3();
  inline void clear_has_analog3();
  inline void set_has_analog4();
  inline void clear_has_analog4();
  inline void set_has_crio_checksum();
  inline void clear_has_crio_checksum();
  inline void set_has_fpga_checksum1();
  inline void clear_has_fpga_checksum1();
  inline void set_has_fpga_checksum2();
  inline void clear_has_fpga_checksum2();
  inline void set_has_fpga_checksum3();
  inline void clear_has_fpga_checksum3();
  inline void set_has_fpga_checksum4();
  inline void clear_has_fpga_checksum4();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::nc::frccomm::CommonControlData_ControlFlags* control_;
  ::google::protobuf::uint32 packet_index_;
  ::google::protobuf::uint32 team_id_;
  ::google::protobuf::uint32 ds_id_alliance_;
  ::google::protobuf::uint32 ds_id_position_;
  ::nc::frccomm::CommonControlData_Joystick* stick0_;
  ::nc::frccomm::CommonControlData_Joystick* stick1_;
  ::nc::frccomm::CommonControlData_Joystick* stick2_;
  ::nc::frccomm::CommonControlData_Joystick* stick3_;
  ::std::string* version_;
  ::google::protobuf::uint32 ds_digital_in_;
  ::google::protobuf::uint32 analog1_;
  ::google::protobuf::uint32 analog2_;
  ::google::protobuf::uint32 analog3_;
  ::google::protobuf::uint64 crio_checksum_;
  ::google::protobuf::uint32 analog4_;
  ::google::protobuf::uint32 fpga_checksum1_;
  ::google::protobuf::uint32 fpga_checksum2_;
  ::google::protobuf::uint32 fpga_checksum3_;
  ::google::protobuf::uint32 fpga_checksum4_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(20 + 31) / 32];
  
  friend void  protobuf_AddDesc_frccomm_2eproto();
  friend void protobuf_AssignDesc_frccomm_2eproto();
  friend void protobuf_ShutdownFile_frccomm_2eproto();
  
  void InitAsDefaultInstance();
  static CommonControlData* default_instance_;
};
// -------------------------------------------------------------------

class StatusData : public ::google::protobuf::Message {
 public:
  StatusData();
  virtual ~StatusData();
  
  StatusData(const StatusData& from);
  
  inline StatusData& operator=(const StatusData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const StatusData& default_instance();
  
  void Swap(StatusData* other);
  
  // implements Message ----------------------------------------------
  
  StatusData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StatusData& from);
  void MergeFrom(const StatusData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional float battery = 1 [default = 0];
  inline bool has_battery() const;
  inline void clear_battery();
  static const int kBatteryFieldNumber = 1;
  inline float battery() const;
  inline void set_battery(float value);
  
  // required uint32 update_num = 2;
  inline bool has_update_num() const;
  inline void clear_update_num();
  static const int kUpdateNumFieldNumber = 2;
  inline ::google::protobuf::uint32 update_num() const;
  inline void set_update_num(::google::protobuf::uint32 value);
  
  // required int32 data_high_len = 3;
  inline bool has_data_high_len() const;
  inline void clear_data_high_len();
  static const int kDataHighLenFieldNumber = 3;
  inline ::google::protobuf::int32 data_high_len() const;
  inline void set_data_high_len(::google::protobuf::int32 value);
  
  // required string data_high = 4;
  inline bool has_data_high() const;
  inline void clear_data_high();
  static const int kDataHighFieldNumber = 4;
  inline const ::std::string& data_high() const;
  inline void set_data_high(const ::std::string& value);
  inline void set_data_high(const char* value);
  inline void set_data_high(const char* value, size_t size);
  inline ::std::string* mutable_data_high();
  inline ::std::string* release_data_high();
  
  // required int32 data_low_len = 5;
  inline bool has_data_low_len() const;
  inline void clear_data_low_len();
  static const int kDataLowLenFieldNumber = 5;
  inline ::google::protobuf::int32 data_low_len() const;
  inline void set_data_low_len(::google::protobuf::int32 value);
  
  // required string data_low = 6;
  inline bool has_data_low() const;
  inline void clear_data_low();
  static const int kDataLowFieldNumber = 6;
  inline const ::std::string& data_low() const;
  inline void set_data_low(const ::std::string& value);
  inline void set_data_low(const char* value);
  inline void set_data_low(const char* value, size_t size);
  inline ::std::string* mutable_data_low();
  inline ::std::string* release_data_low();
  
  // optional uint32 ds_digital_out = 16;
  inline bool has_ds_digital_out() const;
  inline void clear_ds_digital_out();
  static const int kDsDigitalOutFieldNumber = 16;
  inline ::google::protobuf::uint32 ds_digital_out() const;
  inline void set_ds_digital_out(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:nc.frccomm.StatusData)
 private:
  inline void set_has_battery();
  inline void clear_has_battery();
  inline void set_has_update_num();
  inline void clear_has_update_num();
  inline void set_has_data_high_len();
  inline void clear_has_data_high_len();
  inline void set_has_data_high();
  inline void clear_has_data_high();
  inline void set_has_data_low_len();
  inline void clear_has_data_low_len();
  inline void set_has_data_low();
  inline void clear_has_data_low();
  inline void set_has_ds_digital_out();
  inline void clear_has_ds_digital_out();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float battery_;
  ::google::protobuf::uint32 update_num_;
  ::std::string* data_high_;
  ::google::protobuf::int32 data_high_len_;
  ::google::protobuf::int32 data_low_len_;
  ::std::string* data_low_;
  ::google::protobuf::uint32 ds_digital_out_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_frccomm_2eproto();
  friend void protobuf_AssignDesc_frccomm_2eproto();
  friend void protobuf_ShutdownFile_frccomm_2eproto();
  
  void InitAsDefaultInstance();
  static StatusData* default_instance_;
};
// -------------------------------------------------------------------

class ErrorData : public ::google::protobuf::Message {
 public:
  ErrorData();
  virtual ~ErrorData();
  
  ErrorData(const ErrorData& from);
  
  inline ErrorData& operator=(const ErrorData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ErrorData& default_instance();
  
  void Swap(ErrorData* other);
  
  // implements Message ----------------------------------------------
  
  ErrorData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ErrorData& from);
  void MergeFrom(const ErrorData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 data_len = 1;
  inline bool has_data_len() const;
  inline void clear_data_len();
  static const int kDataLenFieldNumber = 1;
  inline ::google::protobuf::uint32 data_len() const;
  inline void set_data_len(::google::protobuf::uint32 value);
  
  // required string error_data = 2;
  inline bool has_error_data() const;
  inline void clear_error_data();
  static const int kErrorDataFieldNumber = 2;
  inline const ::std::string& error_data() const;
  inline void set_error_data(const ::std::string& value);
  inline void set_error_data(const char* value);
  inline void set_error_data(const char* value, size_t size);
  inline ::std::string* mutable_error_data();
  inline ::std::string* release_error_data();
  
  // @@protoc_insertion_point(class_scope:nc.frccomm.ErrorData)
 private:
  inline void set_has_data_len();
  inline void clear_has_data_len();
  inline void set_has_error_data();
  inline void clear_has_error_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* error_data_;
  ::google::protobuf::uint32 data_len_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_frccomm_2eproto();
  friend void protobuf_AssignDesc_frccomm_2eproto();
  friend void protobuf_ShutdownFile_frccomm_2eproto();
  
  void InitAsDefaultInstance();
  static ErrorData* default_instance_;
};
// -------------------------------------------------------------------

class DsLcdData : public ::google::protobuf::Message {
 public:
  DsLcdData();
  virtual ~DsLcdData();
  
  DsLcdData(const DsLcdData& from);
  
  inline DsLcdData& operator=(const DsLcdData& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DsLcdData& default_instance();
  
  void Swap(DsLcdData* other);
  
  // implements Message ----------------------------------------------
  
  DsLcdData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DsLcdData& from);
  void MergeFrom(const DsLcdData& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 data_len = 1;
  inline bool has_data_len() const;
  inline void clear_data_len();
  static const int kDataLenFieldNumber = 1;
  inline ::google::protobuf::uint32 data_len() const;
  inline void set_data_len(::google::protobuf::uint32 value);
  
  // required string lcd_data = 2;
  inline bool has_lcd_data() const;
  inline void clear_lcd_data();
  static const int kLcdDataFieldNumber = 2;
  inline const ::std::string& lcd_data() const;
  inline void set_lcd_data(const ::std::string& value);
  inline void set_lcd_data(const char* value);
  inline void set_lcd_data(const char* value, size_t size);
  inline ::std::string* mutable_lcd_data();
  inline ::std::string* release_lcd_data();
  
  // @@protoc_insertion_point(class_scope:nc.frccomm.DsLcdData)
 private:
  inline void set_has_data_len();
  inline void clear_has_data_len();
  inline void set_has_lcd_data();
  inline void clear_has_lcd_data();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* lcd_data_;
  ::google::protobuf::uint32 data_len_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_frccomm_2eproto();
  friend void protobuf_AssignDesc_frccomm_2eproto();
  friend void protobuf_ShutdownFile_frccomm_2eproto();
  
  void InitAsDefaultInstance();
  static DsLcdData* default_instance_;
};
// ===================================================================


// ===================================================================

// CommonControlData_ControlFlags

// optional bool reset = 1 [default = true];
inline bool CommonControlData_ControlFlags::has_reset() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_reset() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonControlData_ControlFlags::clear_has_reset() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonControlData_ControlFlags::clear_reset() {
  reset_ = true;
  clear_has_reset();
}
inline bool CommonControlData_ControlFlags::reset() const {
  return reset_;
}
inline void CommonControlData_ControlFlags::set_reset(bool value) {
  set_has_reset();
  reset_ = value;
}

// optional bool not_estop = 2 [default = true];
inline bool CommonControlData_ControlFlags::has_not_estop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_not_estop() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonControlData_ControlFlags::clear_has_not_estop() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonControlData_ControlFlags::clear_not_estop() {
  not_estop_ = true;
  clear_has_not_estop();
}
inline bool CommonControlData_ControlFlags::not_estop() const {
  return not_estop_;
}
inline void CommonControlData_ControlFlags::set_not_estop(bool value) {
  set_has_not_estop();
  not_estop_ = value;
}

// optional bool enabled = 3 [default = true];
inline bool CommonControlData_ControlFlags::has_enabled() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_enabled() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonControlData_ControlFlags::clear_has_enabled() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonControlData_ControlFlags::clear_enabled() {
  enabled_ = true;
  clear_has_enabled();
}
inline bool CommonControlData_ControlFlags::enabled() const {
  return enabled_;
}
inline void CommonControlData_ControlFlags::set_enabled(bool value) {
  set_has_enabled();
  enabled_ = value;
}

// optional bool autonomous = 4 [default = true];
inline bool CommonControlData_ControlFlags::has_autonomous() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_autonomous() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonControlData_ControlFlags::clear_has_autonomous() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonControlData_ControlFlags::clear_autonomous() {
  autonomous_ = true;
  clear_has_autonomous();
}
inline bool CommonControlData_ControlFlags::autonomous() const {
  return autonomous_;
}
inline void CommonControlData_ControlFlags::set_autonomous(bool value) {
  set_has_autonomous();
  autonomous_ = value;
}

// optional bool fms_attached = 5 [default = true];
inline bool CommonControlData_ControlFlags::has_fms_attached() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_fms_attached() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonControlData_ControlFlags::clear_has_fms_attached() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonControlData_ControlFlags::clear_fms_attached() {
  fms_attached_ = true;
  clear_has_fms_attached();
}
inline bool CommonControlData_ControlFlags::fms_attached() const {
  return fms_attached_;
}
inline void CommonControlData_ControlFlags::set_fms_attached(bool value) {
  set_has_fms_attached();
  fms_attached_ = value;
}

// optional bool resync = 6 [default = true];
inline bool CommonControlData_ControlFlags::has_resync() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_resync() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonControlData_ControlFlags::clear_has_resync() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonControlData_ControlFlags::clear_resync() {
  resync_ = true;
  clear_has_resync();
}
inline bool CommonControlData_ControlFlags::resync() const {
  return resync_;
}
inline void CommonControlData_ControlFlags::set_resync(bool value) {
  set_has_resync();
  resync_ = value;
}

// optional bool crio_checksum = 7 [default = true];
inline bool CommonControlData_ControlFlags::has_crio_checksum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_crio_checksum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonControlData_ControlFlags::clear_has_crio_checksum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonControlData_ControlFlags::clear_crio_checksum() {
  crio_checksum_ = true;
  clear_has_crio_checksum();
}
inline bool CommonControlData_ControlFlags::crio_checksum() const {
  return crio_checksum_;
}
inline void CommonControlData_ControlFlags::set_crio_checksum(bool value) {
  set_has_crio_checksum();
  crio_checksum_ = value;
}

// optional bool fpga_checksum = 8 [default = true];
inline bool CommonControlData_ControlFlags::has_fpga_checksum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonControlData_ControlFlags::set_has_fpga_checksum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommonControlData_ControlFlags::clear_has_fpga_checksum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommonControlData_ControlFlags::clear_fpga_checksum() {
  fpga_checksum_ = true;
  clear_has_fpga_checksum();
}
inline bool CommonControlData_ControlFlags::fpga_checksum() const {
  return fpga_checksum_;
}
inline void CommonControlData_ControlFlags::set_fpga_checksum(bool value) {
  set_has_fpga_checksum();
  fpga_checksum_ = value;
}

// -------------------------------------------------------------------

// CommonControlData_Joystick

// optional sint32 axis1 = 1;
inline bool CommonControlData_Joystick::has_axis1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonControlData_Joystick::set_has_axis1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonControlData_Joystick::clear_has_axis1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonControlData_Joystick::clear_axis1() {
  axis1_ = 0;
  clear_has_axis1();
}
inline ::google::protobuf::int32 CommonControlData_Joystick::axis1() const {
  return axis1_;
}
inline void CommonControlData_Joystick::set_axis1(::google::protobuf::int32 value) {
  set_has_axis1();
  axis1_ = value;
}

// optional sint32 axis2 = 2;
inline bool CommonControlData_Joystick::has_axis2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonControlData_Joystick::set_has_axis2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonControlData_Joystick::clear_has_axis2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonControlData_Joystick::clear_axis2() {
  axis2_ = 0;
  clear_has_axis2();
}
inline ::google::protobuf::int32 CommonControlData_Joystick::axis2() const {
  return axis2_;
}
inline void CommonControlData_Joystick::set_axis2(::google::protobuf::int32 value) {
  set_has_axis2();
  axis2_ = value;
}

// optional sint32 axis3 = 3;
inline bool CommonControlData_Joystick::has_axis3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonControlData_Joystick::set_has_axis3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonControlData_Joystick::clear_has_axis3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonControlData_Joystick::clear_axis3() {
  axis3_ = 0;
  clear_has_axis3();
}
inline ::google::protobuf::int32 CommonControlData_Joystick::axis3() const {
  return axis3_;
}
inline void CommonControlData_Joystick::set_axis3(::google::protobuf::int32 value) {
  set_has_axis3();
  axis3_ = value;
}

// optional sint32 axis4 = 4;
inline bool CommonControlData_Joystick::has_axis4() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonControlData_Joystick::set_has_axis4() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonControlData_Joystick::clear_has_axis4() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonControlData_Joystick::clear_axis4() {
  axis4_ = 0;
  clear_has_axis4();
}
inline ::google::protobuf::int32 CommonControlData_Joystick::axis4() const {
  return axis4_;
}
inline void CommonControlData_Joystick::set_axis4(::google::protobuf::int32 value) {
  set_has_axis4();
  axis4_ = value;
}

// optional sint32 axis5 = 5;
inline bool CommonControlData_Joystick::has_axis5() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonControlData_Joystick::set_has_axis5() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonControlData_Joystick::clear_has_axis5() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonControlData_Joystick::clear_axis5() {
  axis5_ = 0;
  clear_has_axis5();
}
inline ::google::protobuf::int32 CommonControlData_Joystick::axis5() const {
  return axis5_;
}
inline void CommonControlData_Joystick::set_axis5(::google::protobuf::int32 value) {
  set_has_axis5();
  axis5_ = value;
}

// optional sint32 axis6 = 6;
inline bool CommonControlData_Joystick::has_axis6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonControlData_Joystick::set_has_axis6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonControlData_Joystick::clear_has_axis6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonControlData_Joystick::clear_axis6() {
  axis6_ = 0;
  clear_has_axis6();
}
inline ::google::protobuf::int32 CommonControlData_Joystick::axis6() const {
  return axis6_;
}
inline void CommonControlData_Joystick::set_axis6(::google::protobuf::int32 value) {
  set_has_axis6();
  axis6_ = value;
}

// optional uint32 buttons = 7;
inline bool CommonControlData_Joystick::has_buttons() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonControlData_Joystick::set_has_buttons() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonControlData_Joystick::clear_has_buttons() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonControlData_Joystick::clear_buttons() {
  buttons_ = 0u;
  clear_has_buttons();
}
inline ::google::protobuf::uint32 CommonControlData_Joystick::buttons() const {
  return buttons_;
}
inline void CommonControlData_Joystick::set_buttons(::google::protobuf::uint32 value) {
  set_has_buttons();
  buttons_ = value;
}

// -------------------------------------------------------------------

// CommonControlData

// required uint32 packet_index = 1;
inline bool CommonControlData::has_packet_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CommonControlData::set_has_packet_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CommonControlData::clear_has_packet_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CommonControlData::clear_packet_index() {
  packet_index_ = 0u;
  clear_has_packet_index();
}
inline ::google::protobuf::uint32 CommonControlData::packet_index() const {
  return packet_index_;
}
inline void CommonControlData::set_packet_index(::google::protobuf::uint32 value) {
  set_has_packet_index();
  packet_index_ = value;
}

// required .nc.frccomm.CommonControlData.ControlFlags control = 2;
inline bool CommonControlData::has_control() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CommonControlData::set_has_control() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CommonControlData::clear_has_control() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CommonControlData::clear_control() {
  if (control_ != NULL) control_->::nc::frccomm::CommonControlData_ControlFlags::Clear();
  clear_has_control();
}
inline const ::nc::frccomm::CommonControlData_ControlFlags& CommonControlData::control() const {
  return control_ != NULL ? *control_ : *default_instance_->control_;
}
inline ::nc::frccomm::CommonControlData_ControlFlags* CommonControlData::mutable_control() {
  set_has_control();
  if (control_ == NULL) control_ = new ::nc::frccomm::CommonControlData_ControlFlags;
  return control_;
}
inline ::nc::frccomm::CommonControlData_ControlFlags* CommonControlData::release_control() {
  clear_has_control();
  ::nc::frccomm::CommonControlData_ControlFlags* temp = control_;
  control_ = NULL;
  return temp;
}

// optional uint32 team_id = 3;
inline bool CommonControlData::has_team_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CommonControlData::set_has_team_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CommonControlData::clear_has_team_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CommonControlData::clear_team_id() {
  team_id_ = 0u;
  clear_has_team_id();
}
inline ::google::protobuf::uint32 CommonControlData::team_id() const {
  return team_id_;
}
inline void CommonControlData::set_team_id(::google::protobuf::uint32 value) {
  set_has_team_id();
  team_id_ = value;
}

// optional uint32 ds_id_alliance = 4;
inline bool CommonControlData::has_ds_id_alliance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CommonControlData::set_has_ds_id_alliance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CommonControlData::clear_has_ds_id_alliance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CommonControlData::clear_ds_id_alliance() {
  ds_id_alliance_ = 0u;
  clear_has_ds_id_alliance();
}
inline ::google::protobuf::uint32 CommonControlData::ds_id_alliance() const {
  return ds_id_alliance_;
}
inline void CommonControlData::set_ds_id_alliance(::google::protobuf::uint32 value) {
  set_has_ds_id_alliance();
  ds_id_alliance_ = value;
}

// optional uint32 ds_id_position = 5;
inline bool CommonControlData::has_ds_id_position() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CommonControlData::set_has_ds_id_position() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CommonControlData::clear_has_ds_id_position() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CommonControlData::clear_ds_id_position() {
  ds_id_position_ = 0u;
  clear_has_ds_id_position();
}
inline ::google::protobuf::uint32 CommonControlData::ds_id_position() const {
  return ds_id_position_;
}
inline void CommonControlData::set_ds_id_position(::google::protobuf::uint32 value) {
  set_has_ds_id_position();
  ds_id_position_ = value;
}

// optional .nc.frccomm.CommonControlData.Joystick stick0 = 6;
inline bool CommonControlData::has_stick0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CommonControlData::set_has_stick0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CommonControlData::clear_has_stick0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CommonControlData::clear_stick0() {
  if (stick0_ != NULL) stick0_->::nc::frccomm::CommonControlData_Joystick::Clear();
  clear_has_stick0();
}
inline const ::nc::frccomm::CommonControlData_Joystick& CommonControlData::stick0() const {
  return stick0_ != NULL ? *stick0_ : *default_instance_->stick0_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::mutable_stick0() {
  set_has_stick0();
  if (stick0_ == NULL) stick0_ = new ::nc::frccomm::CommonControlData_Joystick;
  return stick0_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::release_stick0() {
  clear_has_stick0();
  ::nc::frccomm::CommonControlData_Joystick* temp = stick0_;
  stick0_ = NULL;
  return temp;
}

// optional .nc.frccomm.CommonControlData.Joystick stick1 = 7;
inline bool CommonControlData::has_stick1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CommonControlData::set_has_stick1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CommonControlData::clear_has_stick1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CommonControlData::clear_stick1() {
  if (stick1_ != NULL) stick1_->::nc::frccomm::CommonControlData_Joystick::Clear();
  clear_has_stick1();
}
inline const ::nc::frccomm::CommonControlData_Joystick& CommonControlData::stick1() const {
  return stick1_ != NULL ? *stick1_ : *default_instance_->stick1_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::mutable_stick1() {
  set_has_stick1();
  if (stick1_ == NULL) stick1_ = new ::nc::frccomm::CommonControlData_Joystick;
  return stick1_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::release_stick1() {
  clear_has_stick1();
  ::nc::frccomm::CommonControlData_Joystick* temp = stick1_;
  stick1_ = NULL;
  return temp;
}

// optional .nc.frccomm.CommonControlData.Joystick stick2 = 8;
inline bool CommonControlData::has_stick2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CommonControlData::set_has_stick2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CommonControlData::clear_has_stick2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CommonControlData::clear_stick2() {
  if (stick2_ != NULL) stick2_->::nc::frccomm::CommonControlData_Joystick::Clear();
  clear_has_stick2();
}
inline const ::nc::frccomm::CommonControlData_Joystick& CommonControlData::stick2() const {
  return stick2_ != NULL ? *stick2_ : *default_instance_->stick2_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::mutable_stick2() {
  set_has_stick2();
  if (stick2_ == NULL) stick2_ = new ::nc::frccomm::CommonControlData_Joystick;
  return stick2_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::release_stick2() {
  clear_has_stick2();
  ::nc::frccomm::CommonControlData_Joystick* temp = stick2_;
  stick2_ = NULL;
  return temp;
}

// optional .nc.frccomm.CommonControlData.Joystick stick3 = 9;
inline bool CommonControlData::has_stick3() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CommonControlData::set_has_stick3() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CommonControlData::clear_has_stick3() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CommonControlData::clear_stick3() {
  if (stick3_ != NULL) stick3_->::nc::frccomm::CommonControlData_Joystick::Clear();
  clear_has_stick3();
}
inline const ::nc::frccomm::CommonControlData_Joystick& CommonControlData::stick3() const {
  return stick3_ != NULL ? *stick3_ : *default_instance_->stick3_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::mutable_stick3() {
  set_has_stick3();
  if (stick3_ == NULL) stick3_ = new ::nc::frccomm::CommonControlData_Joystick;
  return stick3_;
}
inline ::nc::frccomm::CommonControlData_Joystick* CommonControlData::release_stick3() {
  clear_has_stick3();
  ::nc::frccomm::CommonControlData_Joystick* temp = stick3_;
  stick3_ = NULL;
  return temp;
}

// optional string version = 10;
inline bool CommonControlData::has_version() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CommonControlData::set_has_version() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CommonControlData::clear_has_version() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CommonControlData::clear_version() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& CommonControlData::version() const {
  return *version_;
}
inline void CommonControlData::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CommonControlData::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(value);
}
inline void CommonControlData::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CommonControlData::mutable_version() {
  set_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    version_ = new ::std::string;
  }
  return version_;
}
inline ::std::string* CommonControlData::release_version() {
  clear_has_version();
  if (version_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 ds_digital_in = 16;
inline bool CommonControlData::has_ds_digital_in() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CommonControlData::set_has_ds_digital_in() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CommonControlData::clear_has_ds_digital_in() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CommonControlData::clear_ds_digital_in() {
  ds_digital_in_ = 0u;
  clear_has_ds_digital_in();
}
inline ::google::protobuf::uint32 CommonControlData::ds_digital_in() const {
  return ds_digital_in_;
}
inline void CommonControlData::set_ds_digital_in(::google::protobuf::uint32 value) {
  set_has_ds_digital_in();
  ds_digital_in_ = value;
}

// optional uint32 analog1 = 17;
inline bool CommonControlData::has_analog1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CommonControlData::set_has_analog1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CommonControlData::clear_has_analog1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CommonControlData::clear_analog1() {
  analog1_ = 0u;
  clear_has_analog1();
}
inline ::google::protobuf::uint32 CommonControlData::analog1() const {
  return analog1_;
}
inline void CommonControlData::set_analog1(::google::protobuf::uint32 value) {
  set_has_analog1();
  analog1_ = value;
}

// optional uint32 analog2 = 18;
inline bool CommonControlData::has_analog2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CommonControlData::set_has_analog2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CommonControlData::clear_has_analog2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CommonControlData::clear_analog2() {
  analog2_ = 0u;
  clear_has_analog2();
}
inline ::google::protobuf::uint32 CommonControlData::analog2() const {
  return analog2_;
}
inline void CommonControlData::set_analog2(::google::protobuf::uint32 value) {
  set_has_analog2();
  analog2_ = value;
}

// optional uint32 analog3 = 19;
inline bool CommonControlData::has_analog3() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CommonControlData::set_has_analog3() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CommonControlData::clear_has_analog3() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CommonControlData::clear_analog3() {
  analog3_ = 0u;
  clear_has_analog3();
}
inline ::google::protobuf::uint32 CommonControlData::analog3() const {
  return analog3_;
}
inline void CommonControlData::set_analog3(::google::protobuf::uint32 value) {
  set_has_analog3();
  analog3_ = value;
}

// optional uint32 analog4 = 20;
inline bool CommonControlData::has_analog4() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CommonControlData::set_has_analog4() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CommonControlData::clear_has_analog4() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CommonControlData::clear_analog4() {
  analog4_ = 0u;
  clear_has_analog4();
}
inline ::google::protobuf::uint32 CommonControlData::analog4() const {
  return analog4_;
}
inline void CommonControlData::set_analog4(::google::protobuf::uint32 value) {
  set_has_analog4();
  analog4_ = value;
}

// optional uint64 crio_checksum = 21;
inline bool CommonControlData::has_crio_checksum() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CommonControlData::set_has_crio_checksum() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CommonControlData::clear_has_crio_checksum() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CommonControlData::clear_crio_checksum() {
  crio_checksum_ = GOOGLE_ULONGLONG(0);
  clear_has_crio_checksum();
}
inline ::google::protobuf::uint64 CommonControlData::crio_checksum() const {
  return crio_checksum_;
}
inline void CommonControlData::set_crio_checksum(::google::protobuf::uint64 value) {
  set_has_crio_checksum();
  crio_checksum_ = value;
}

// optional uint32 fpga_checksum1 = 22;
inline bool CommonControlData::has_fpga_checksum1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CommonControlData::set_has_fpga_checksum1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CommonControlData::clear_has_fpga_checksum1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CommonControlData::clear_fpga_checksum1() {
  fpga_checksum1_ = 0u;
  clear_has_fpga_checksum1();
}
inline ::google::protobuf::uint32 CommonControlData::fpga_checksum1() const {
  return fpga_checksum1_;
}
inline void CommonControlData::set_fpga_checksum1(::google::protobuf::uint32 value) {
  set_has_fpga_checksum1();
  fpga_checksum1_ = value;
}

// optional uint32 fpga_checksum2 = 23;
inline bool CommonControlData::has_fpga_checksum2() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CommonControlData::set_has_fpga_checksum2() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CommonControlData::clear_has_fpga_checksum2() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CommonControlData::clear_fpga_checksum2() {
  fpga_checksum2_ = 0u;
  clear_has_fpga_checksum2();
}
inline ::google::protobuf::uint32 CommonControlData::fpga_checksum2() const {
  return fpga_checksum2_;
}
inline void CommonControlData::set_fpga_checksum2(::google::protobuf::uint32 value) {
  set_has_fpga_checksum2();
  fpga_checksum2_ = value;
}

// optional uint32 fpga_checksum3 = 24;
inline bool CommonControlData::has_fpga_checksum3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CommonControlData::set_has_fpga_checksum3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CommonControlData::clear_has_fpga_checksum3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CommonControlData::clear_fpga_checksum3() {
  fpga_checksum3_ = 0u;
  clear_has_fpga_checksum3();
}
inline ::google::protobuf::uint32 CommonControlData::fpga_checksum3() const {
  return fpga_checksum3_;
}
inline void CommonControlData::set_fpga_checksum3(::google::protobuf::uint32 value) {
  set_has_fpga_checksum3();
  fpga_checksum3_ = value;
}

// optional uint32 fpga_checksum4 = 25;
inline bool CommonControlData::has_fpga_checksum4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CommonControlData::set_has_fpga_checksum4() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CommonControlData::clear_has_fpga_checksum4() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CommonControlData::clear_fpga_checksum4() {
  fpga_checksum4_ = 0u;
  clear_has_fpga_checksum4();
}
inline ::google::protobuf::uint32 CommonControlData::fpga_checksum4() const {
  return fpga_checksum4_;
}
inline void CommonControlData::set_fpga_checksum4(::google::protobuf::uint32 value) {
  set_has_fpga_checksum4();
  fpga_checksum4_ = value;
}

// -------------------------------------------------------------------

// StatusData

// optional float battery = 1 [default = 0];
inline bool StatusData::has_battery() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StatusData::set_has_battery() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StatusData::clear_has_battery() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StatusData::clear_battery() {
  battery_ = 0;
  clear_has_battery();
}
inline float StatusData::battery() const {
  return battery_;
}
inline void StatusData::set_battery(float value) {
  set_has_battery();
  battery_ = value;
}

// required uint32 update_num = 2;
inline bool StatusData::has_update_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StatusData::set_has_update_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StatusData::clear_has_update_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StatusData::clear_update_num() {
  update_num_ = 0u;
  clear_has_update_num();
}
inline ::google::protobuf::uint32 StatusData::update_num() const {
  return update_num_;
}
inline void StatusData::set_update_num(::google::protobuf::uint32 value) {
  set_has_update_num();
  update_num_ = value;
}

// required int32 data_high_len = 3;
inline bool StatusData::has_data_high_len() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StatusData::set_has_data_high_len() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StatusData::clear_has_data_high_len() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StatusData::clear_data_high_len() {
  data_high_len_ = 0;
  clear_has_data_high_len();
}
inline ::google::protobuf::int32 StatusData::data_high_len() const {
  return data_high_len_;
}
inline void StatusData::set_data_high_len(::google::protobuf::int32 value) {
  set_has_data_high_len();
  data_high_len_ = value;
}

// required string data_high = 4;
inline bool StatusData::has_data_high() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StatusData::set_has_data_high() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StatusData::clear_has_data_high() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StatusData::clear_data_high() {
  if (data_high_ != &::google::protobuf::internal::kEmptyString) {
    data_high_->clear();
  }
  clear_has_data_high();
}
inline const ::std::string& StatusData::data_high() const {
  return *data_high_;
}
inline void StatusData::set_data_high(const ::std::string& value) {
  set_has_data_high();
  if (data_high_ == &::google::protobuf::internal::kEmptyString) {
    data_high_ = new ::std::string;
  }
  data_high_->assign(value);
}
inline void StatusData::set_data_high(const char* value) {
  set_has_data_high();
  if (data_high_ == &::google::protobuf::internal::kEmptyString) {
    data_high_ = new ::std::string;
  }
  data_high_->assign(value);
}
inline void StatusData::set_data_high(const char* value, size_t size) {
  set_has_data_high();
  if (data_high_ == &::google::protobuf::internal::kEmptyString) {
    data_high_ = new ::std::string;
  }
  data_high_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatusData::mutable_data_high() {
  set_has_data_high();
  if (data_high_ == &::google::protobuf::internal::kEmptyString) {
    data_high_ = new ::std::string;
  }
  return data_high_;
}
inline ::std::string* StatusData::release_data_high() {
  clear_has_data_high();
  if (data_high_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_high_;
    data_high_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 data_low_len = 5;
inline bool StatusData::has_data_low_len() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StatusData::set_has_data_low_len() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StatusData::clear_has_data_low_len() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StatusData::clear_data_low_len() {
  data_low_len_ = 0;
  clear_has_data_low_len();
}
inline ::google::protobuf::int32 StatusData::data_low_len() const {
  return data_low_len_;
}
inline void StatusData::set_data_low_len(::google::protobuf::int32 value) {
  set_has_data_low_len();
  data_low_len_ = value;
}

// required string data_low = 6;
inline bool StatusData::has_data_low() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void StatusData::set_has_data_low() {
  _has_bits_[0] |= 0x00000020u;
}
inline void StatusData::clear_has_data_low() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void StatusData::clear_data_low() {
  if (data_low_ != &::google::protobuf::internal::kEmptyString) {
    data_low_->clear();
  }
  clear_has_data_low();
}
inline const ::std::string& StatusData::data_low() const {
  return *data_low_;
}
inline void StatusData::set_data_low(const ::std::string& value) {
  set_has_data_low();
  if (data_low_ == &::google::protobuf::internal::kEmptyString) {
    data_low_ = new ::std::string;
  }
  data_low_->assign(value);
}
inline void StatusData::set_data_low(const char* value) {
  set_has_data_low();
  if (data_low_ == &::google::protobuf::internal::kEmptyString) {
    data_low_ = new ::std::string;
  }
  data_low_->assign(value);
}
inline void StatusData::set_data_low(const char* value, size_t size) {
  set_has_data_low();
  if (data_low_ == &::google::protobuf::internal::kEmptyString) {
    data_low_ = new ::std::string;
  }
  data_low_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* StatusData::mutable_data_low() {
  set_has_data_low();
  if (data_low_ == &::google::protobuf::internal::kEmptyString) {
    data_low_ = new ::std::string;
  }
  return data_low_;
}
inline ::std::string* StatusData::release_data_low() {
  clear_has_data_low();
  if (data_low_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_low_;
    data_low_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional uint32 ds_digital_out = 16;
inline bool StatusData::has_ds_digital_out() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void StatusData::set_has_ds_digital_out() {
  _has_bits_[0] |= 0x00000040u;
}
inline void StatusData::clear_has_ds_digital_out() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void StatusData::clear_ds_digital_out() {
  ds_digital_out_ = 0u;
  clear_has_ds_digital_out();
}
inline ::google::protobuf::uint32 StatusData::ds_digital_out() const {
  return ds_digital_out_;
}
inline void StatusData::set_ds_digital_out(::google::protobuf::uint32 value) {
  set_has_ds_digital_out();
  ds_digital_out_ = value;
}

// -------------------------------------------------------------------

// ErrorData

// required uint32 data_len = 1;
inline bool ErrorData::has_data_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ErrorData::set_has_data_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ErrorData::clear_has_data_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ErrorData::clear_data_len() {
  data_len_ = 0u;
  clear_has_data_len();
}
inline ::google::protobuf::uint32 ErrorData::data_len() const {
  return data_len_;
}
inline void ErrorData::set_data_len(::google::protobuf::uint32 value) {
  set_has_data_len();
  data_len_ = value;
}

// required string error_data = 2;
inline bool ErrorData::has_error_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ErrorData::set_has_error_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ErrorData::clear_has_error_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ErrorData::clear_error_data() {
  if (error_data_ != &::google::protobuf::internal::kEmptyString) {
    error_data_->clear();
  }
  clear_has_error_data();
}
inline const ::std::string& ErrorData::error_data() const {
  return *error_data_;
}
inline void ErrorData::set_error_data(const ::std::string& value) {
  set_has_error_data();
  if (error_data_ == &::google::protobuf::internal::kEmptyString) {
    error_data_ = new ::std::string;
  }
  error_data_->assign(value);
}
inline void ErrorData::set_error_data(const char* value) {
  set_has_error_data();
  if (error_data_ == &::google::protobuf::internal::kEmptyString) {
    error_data_ = new ::std::string;
  }
  error_data_->assign(value);
}
inline void ErrorData::set_error_data(const char* value, size_t size) {
  set_has_error_data();
  if (error_data_ == &::google::protobuf::internal::kEmptyString) {
    error_data_ = new ::std::string;
  }
  error_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ErrorData::mutable_error_data() {
  set_has_error_data();
  if (error_data_ == &::google::protobuf::internal::kEmptyString) {
    error_data_ = new ::std::string;
  }
  return error_data_;
}
inline ::std::string* ErrorData::release_error_data() {
  clear_has_error_data();
  if (error_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_data_;
    error_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// DsLcdData

// required uint32 data_len = 1;
inline bool DsLcdData::has_data_len() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DsLcdData::set_has_data_len() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DsLcdData::clear_has_data_len() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DsLcdData::clear_data_len() {
  data_len_ = 0u;
  clear_has_data_len();
}
inline ::google::protobuf::uint32 DsLcdData::data_len() const {
  return data_len_;
}
inline void DsLcdData::set_data_len(::google::protobuf::uint32 value) {
  set_has_data_len();
  data_len_ = value;
}

// required string lcd_data = 2;
inline bool DsLcdData::has_lcd_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DsLcdData::set_has_lcd_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DsLcdData::clear_has_lcd_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DsLcdData::clear_lcd_data() {
  if (lcd_data_ != &::google::protobuf::internal::kEmptyString) {
    lcd_data_->clear();
  }
  clear_has_lcd_data();
}
inline const ::std::string& DsLcdData::lcd_data() const {
  return *lcd_data_;
}
inline void DsLcdData::set_lcd_data(const ::std::string& value) {
  set_has_lcd_data();
  if (lcd_data_ == &::google::protobuf::internal::kEmptyString) {
    lcd_data_ = new ::std::string;
  }
  lcd_data_->assign(value);
}
inline void DsLcdData::set_lcd_data(const char* value) {
  set_has_lcd_data();
  if (lcd_data_ == &::google::protobuf::internal::kEmptyString) {
    lcd_data_ = new ::std::string;
  }
  lcd_data_->assign(value);
}
inline void DsLcdData::set_lcd_data(const char* value, size_t size) {
  set_has_lcd_data();
  if (lcd_data_ == &::google::protobuf::internal::kEmptyString) {
    lcd_data_ = new ::std::string;
  }
  lcd_data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* DsLcdData::mutable_lcd_data() {
  set_has_lcd_data();
  if (lcd_data_ == &::google::protobuf::internal::kEmptyString) {
    lcd_data_ = new ::std::string;
  }
  return lcd_data_;
}
inline ::std::string* DsLcdData::release_lcd_data() {
  clear_has_lcd_data();
  if (lcd_data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = lcd_data_;
    lcd_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace frccomm
}  // namespace nc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_frccomm_2eproto__INCLUDED
