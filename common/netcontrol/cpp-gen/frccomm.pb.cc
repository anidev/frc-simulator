// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "frccomm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace nc {
namespace frccomm {

namespace {

const ::google::protobuf::Descriptor* CommonControlData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonControlData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonControlData_ControlFlags_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonControlData_ControlFlags_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonControlData_Joystick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonControlData_Joystick_reflection_ = NULL;
const ::google::protobuf::Descriptor* StatusData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StatusData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ErrorData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ErrorData_reflection_ = NULL;
const ::google::protobuf::Descriptor* DsLcdData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DsLcdData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_frccomm_2eproto() {
  protobuf_AddDesc_frccomm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "frccomm.proto");
  GOOGLE_CHECK(file != NULL);
  CommonControlData_descriptor_ = file->message_type(0);
  static const int CommonControlData_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, packet_index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, control_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, team_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, ds_id_alliance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, ds_id_position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, stick0_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, stick1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, stick2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, stick3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, ds_digital_in_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, analog1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, analog2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, analog3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, analog4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, crio_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, fpga_checksum1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, fpga_checksum2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, fpga_checksum3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, fpga_checksum4_),
  };
  CommonControlData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonControlData_descriptor_,
      CommonControlData::default_instance_,
      CommonControlData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonControlData));
  CommonControlData_ControlFlags_descriptor_ = CommonControlData_descriptor_->nested_type(0);
  static const int CommonControlData_ControlFlags_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, not_estop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, enabled_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, autonomous_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, fms_attached_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, resync_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, crio_checksum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, fpga_checksum_),
  };
  CommonControlData_ControlFlags_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonControlData_ControlFlags_descriptor_,
      CommonControlData_ControlFlags::default_instance_,
      CommonControlData_ControlFlags_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_ControlFlags, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonControlData_ControlFlags));
  CommonControlData_Joystick_descriptor_ = CommonControlData_descriptor_->nested_type(1);
  static const int CommonControlData_Joystick_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, axis1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, axis2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, axis3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, axis4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, axis5_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, axis6_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, buttons_),
  };
  CommonControlData_Joystick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonControlData_Joystick_descriptor_,
      CommonControlData_Joystick::default_instance_,
      CommonControlData_Joystick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonControlData_Joystick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonControlData_Joystick));
  StatusData_descriptor_ = file->message_type(1);
  static const int StatusData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, battery_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, update_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, data_high_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, data_high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, data_low_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, data_low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, ds_digital_out_),
  };
  StatusData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StatusData_descriptor_,
      StatusData::default_instance_,
      StatusData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StatusData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StatusData));
  ErrorData_descriptor_ = file->message_type(2);
  static const int ErrorData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorData, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorData, error_data_),
  };
  ErrorData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ErrorData_descriptor_,
      ErrorData::default_instance_,
      ErrorData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ErrorData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ErrorData));
  DsLcdData_descriptor_ = file->message_type(3);
  static const int DsLcdData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLcdData, data_len_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLcdData, lcd_data_),
  };
  DsLcdData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DsLcdData_descriptor_,
      DsLcdData::default_instance_,
      DsLcdData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLcdData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DsLcdData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DsLcdData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_frccomm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonControlData_descriptor_, &CommonControlData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonControlData_ControlFlags_descriptor_, &CommonControlData_ControlFlags::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonControlData_Joystick_descriptor_, &CommonControlData_Joystick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StatusData_descriptor_, &StatusData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ErrorData_descriptor_, &ErrorData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DsLcdData_descriptor_, &DsLcdData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_frccomm_2eproto() {
  delete CommonControlData::default_instance_;
  delete CommonControlData_reflection_;
  delete CommonControlData_ControlFlags::default_instance_;
  delete CommonControlData_ControlFlags_reflection_;
  delete CommonControlData_Joystick::default_instance_;
  delete CommonControlData_Joystick_reflection_;
  delete StatusData::default_instance_;
  delete StatusData_reflection_;
  delete ErrorData::default_instance_;
  delete ErrorData_reflection_;
  delete DsLcdData::default_instance_;
  delete DsLcdData_reflection_;
}

void protobuf_AddDesc_frccomm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rfrccomm.proto\022\nnc.frccomm\"\275\007\n\021CommonCo"
    "ntrolData\022\024\n\014packet_index\030\001 \002(\r\022;\n\007contr"
    "ol\030\002 \002(\0132*.nc.frccomm.CommonControlData."
    "ControlFlags\022\017\n\007team_id\030\003 \001(\r\022\026\n\016ds_id_a"
    "lliance\030\004 \001(\r\022\026\n\016ds_id_position\030\005 \001(\r\0226\n"
    "\006stick0\030\006 \001(\0132&.nc.frccomm.CommonControl"
    "Data.Joystick\0226\n\006stick1\030\007 \001(\0132&.nc.frcco"
    "mm.CommonControlData.Joystick\0226\n\006stick2\030"
    "\010 \001(\0132&.nc.frccomm.CommonControlData.Joy"
    "stick\0226\n\006stick3\030\t \001(\0132&.nc.frccomm.Commo"
    "nControlData.Joystick\022\017\n\007version\030\n \001(\t\022\025"
    "\n\rds_digital_in\030\020 \001(\r\022\017\n\007analog1\030\021 \001(\r\022\017"
    "\n\007analog2\030\022 \001(\r\022\017\n\007analog3\030\023 \001(\r\022\017\n\007anal"
    "og4\030\024 \001(\r\022\025\n\rcrio_checksum\030\025 \001(\004\022\026\n\016fpga"
    "_checksum1\030\026 \001(\r\022\026\n\016fpga_checksum2\030\027 \001(\r"
    "\022\026\n\016fpga_checksum3\030\030 \001(\r\022\026\n\016fpga_checksu"
    "m4\030\031 \001(\r\032\331\001\n\014ControlFlags\022\023\n\005reset\030\001 \001(\010"
    ":\004true\022\027\n\tnot_estop\030\002 \001(\010:\004true\022\025\n\007enabl"
    "ed\030\003 \001(\010:\004true\022\030\n\nautonomous\030\004 \001(\010:\004true"
    "\022\032\n\014fms_attached\030\005 \001(\010:\004true\022\024\n\006resync\030\006"
    " \001(\010:\004true\022\033\n\rcrio_checksum\030\007 \001(\010:\004true\022"
    "\033\n\rfpga_checksum\030\010 \001(\010:\004true\032u\n\010Joystick"
    "\022\r\n\005axis1\030\001 \001(\021\022\r\n\005axis2\030\002 \001(\021\022\r\n\005axis3\030"
    "\003 \001(\021\022\r\n\005axis4\030\004 \001(\021\022\r\n\005axis5\030\005 \001(\021\022\r\n\005a"
    "xis6\030\006 \001(\021\022\017\n\007buttons\030\007 \001(\r\"\236\001\n\nStatusDa"
    "ta\022\022\n\007battery\030\001 \001(\002:\0010\022\022\n\nupdate_num\030\002 \002"
    "(\r\022\025\n\rdata_high_len\030\003 \002(\005\022\021\n\tdata_high\030\004"
    " \002(\t\022\024\n\014data_low_len\030\005 \002(\005\022\020\n\010data_low\030\006"
    " \002(\t\022\026\n\016ds_digital_out\030\020 \001(\r\"1\n\tErrorDat"
    "a\022\020\n\010data_len\030\001 \002(\r\022\022\n\nerror_data\030\002 \002(\t\""
    "/\n\tDsLcdData\022\020\n\010data_len\030\001 \002(\r\022\020\n\010lcd_da"
    "ta\030\002 \002(\t", 1248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "frccomm.proto", &protobuf_RegisterTypes);
  CommonControlData::default_instance_ = new CommonControlData();
  CommonControlData_ControlFlags::default_instance_ = new CommonControlData_ControlFlags();
  CommonControlData_Joystick::default_instance_ = new CommonControlData_Joystick();
  StatusData::default_instance_ = new StatusData();
  ErrorData::default_instance_ = new ErrorData();
  DsLcdData::default_instance_ = new DsLcdData();
  CommonControlData::default_instance_->InitAsDefaultInstance();
  CommonControlData_ControlFlags::default_instance_->InitAsDefaultInstance();
  CommonControlData_Joystick::default_instance_->InitAsDefaultInstance();
  StatusData::default_instance_->InitAsDefaultInstance();
  ErrorData::default_instance_->InitAsDefaultInstance();
  DsLcdData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_frccomm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_frccomm_2eproto {
  StaticDescriptorInitializer_frccomm_2eproto() {
    protobuf_AddDesc_frccomm_2eproto();
  }
} static_descriptor_initializer_frccomm_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int CommonControlData_ControlFlags::kResetFieldNumber;
const int CommonControlData_ControlFlags::kNotEstopFieldNumber;
const int CommonControlData_ControlFlags::kEnabledFieldNumber;
const int CommonControlData_ControlFlags::kAutonomousFieldNumber;
const int CommonControlData_ControlFlags::kFmsAttachedFieldNumber;
const int CommonControlData_ControlFlags::kResyncFieldNumber;
const int CommonControlData_ControlFlags::kCrioChecksumFieldNumber;
const int CommonControlData_ControlFlags::kFpgaChecksumFieldNumber;
#endif  // !_MSC_VER

CommonControlData_ControlFlags::CommonControlData_ControlFlags()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonControlData_ControlFlags::InitAsDefaultInstance() {
}

CommonControlData_ControlFlags::CommonControlData_ControlFlags(const CommonControlData_ControlFlags& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonControlData_ControlFlags::SharedCtor() {
  _cached_size_ = 0;
  reset_ = true;
  not_estop_ = true;
  enabled_ = true;
  autonomous_ = true;
  fms_attached_ = true;
  resync_ = true;
  crio_checksum_ = true;
  fpga_checksum_ = true;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonControlData_ControlFlags::~CommonControlData_ControlFlags() {
  SharedDtor();
}

void CommonControlData_ControlFlags::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonControlData_ControlFlags::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonControlData_ControlFlags::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonControlData_ControlFlags_descriptor_;
}

const CommonControlData_ControlFlags& CommonControlData_ControlFlags::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frccomm_2eproto();  return *default_instance_;
}

CommonControlData_ControlFlags* CommonControlData_ControlFlags::default_instance_ = NULL;

CommonControlData_ControlFlags* CommonControlData_ControlFlags::New() const {
  return new CommonControlData_ControlFlags;
}

void CommonControlData_ControlFlags::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reset_ = true;
    not_estop_ = true;
    enabled_ = true;
    autonomous_ = true;
    fms_attached_ = true;
    resync_ = true;
    crio_checksum_ = true;
    fpga_checksum_ = true;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonControlData_ControlFlags::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool reset = 1 [default = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_not_estop;
        break;
      }
      
      // optional bool not_estop = 2 [default = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_not_estop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_estop_)));
          set_has_not_estop();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enabled;
        break;
      }
      
      // optional bool enabled = 3 [default = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enabled:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enabled_)));
          set_has_enabled();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_autonomous;
        break;
      }
      
      // optional bool autonomous = 4 [default = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_autonomous:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autonomous_)));
          set_has_autonomous();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fms_attached;
        break;
      }
      
      // optional bool fms_attached = 5 [default = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fms_attached:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fms_attached_)));
          set_has_fms_attached();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_resync;
        break;
      }
      
      // optional bool resync = 6 [default = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resync:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &resync_)));
          set_has_resync();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_crio_checksum;
        break;
      }
      
      // optional bool crio_checksum = 7 [default = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crio_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crio_checksum_)));
          set_has_crio_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_fpga_checksum;
        break;
      }
      
      // optional bool fpga_checksum = 8 [default = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fpga_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fpga_checksum_)));
          set_has_fpga_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonControlData_ControlFlags::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool reset = 1 [default = true];
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->reset(), output);
  }
  
  // optional bool not_estop = 2 [default = true];
  if (has_not_estop()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->not_estop(), output);
  }
  
  // optional bool enabled = 3 [default = true];
  if (has_enabled()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enabled(), output);
  }
  
  // optional bool autonomous = 4 [default = true];
  if (has_autonomous()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->autonomous(), output);
  }
  
  // optional bool fms_attached = 5 [default = true];
  if (has_fms_attached()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fms_attached(), output);
  }
  
  // optional bool resync = 6 [default = true];
  if (has_resync()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->resync(), output);
  }
  
  // optional bool crio_checksum = 7 [default = true];
  if (has_crio_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->crio_checksum(), output);
  }
  
  // optional bool fpga_checksum = 8 [default = true];
  if (has_fpga_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->fpga_checksum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonControlData_ControlFlags::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool reset = 1 [default = true];
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->reset(), target);
  }
  
  // optional bool not_estop = 2 [default = true];
  if (has_not_estop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->not_estop(), target);
  }
  
  // optional bool enabled = 3 [default = true];
  if (has_enabled()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enabled(), target);
  }
  
  // optional bool autonomous = 4 [default = true];
  if (has_autonomous()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->autonomous(), target);
  }
  
  // optional bool fms_attached = 5 [default = true];
  if (has_fms_attached()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->fms_attached(), target);
  }
  
  // optional bool resync = 6 [default = true];
  if (has_resync()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->resync(), target);
  }
  
  // optional bool crio_checksum = 7 [default = true];
  if (has_crio_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->crio_checksum(), target);
  }
  
  // optional bool fpga_checksum = 8 [default = true];
  if (has_fpga_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->fpga_checksum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonControlData_ControlFlags::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool reset = 1 [default = true];
    if (has_reset()) {
      total_size += 1 + 1;
    }
    
    // optional bool not_estop = 2 [default = true];
    if (has_not_estop()) {
      total_size += 1 + 1;
    }
    
    // optional bool enabled = 3 [default = true];
    if (has_enabled()) {
      total_size += 1 + 1;
    }
    
    // optional bool autonomous = 4 [default = true];
    if (has_autonomous()) {
      total_size += 1 + 1;
    }
    
    // optional bool fms_attached = 5 [default = true];
    if (has_fms_attached()) {
      total_size += 1 + 1;
    }
    
    // optional bool resync = 6 [default = true];
    if (has_resync()) {
      total_size += 1 + 1;
    }
    
    // optional bool crio_checksum = 7 [default = true];
    if (has_crio_checksum()) {
      total_size += 1 + 1;
    }
    
    // optional bool fpga_checksum = 8 [default = true];
    if (has_fpga_checksum()) {
      total_size += 1 + 1;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonControlData_ControlFlags::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonControlData_ControlFlags* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonControlData_ControlFlags*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonControlData_ControlFlags::MergeFrom(const CommonControlData_ControlFlags& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reset()) {
      set_reset(from.reset());
    }
    if (from.has_not_estop()) {
      set_not_estop(from.not_estop());
    }
    if (from.has_enabled()) {
      set_enabled(from.enabled());
    }
    if (from.has_autonomous()) {
      set_autonomous(from.autonomous());
    }
    if (from.has_fms_attached()) {
      set_fms_attached(from.fms_attached());
    }
    if (from.has_resync()) {
      set_resync(from.resync());
    }
    if (from.has_crio_checksum()) {
      set_crio_checksum(from.crio_checksum());
    }
    if (from.has_fpga_checksum()) {
      set_fpga_checksum(from.fpga_checksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonControlData_ControlFlags::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonControlData_ControlFlags::CopyFrom(const CommonControlData_ControlFlags& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonControlData_ControlFlags::IsInitialized() const {
  
  return true;
}

void CommonControlData_ControlFlags::Swap(CommonControlData_ControlFlags* other) {
  if (other != this) {
    std::swap(reset_, other->reset_);
    std::swap(not_estop_, other->not_estop_);
    std::swap(enabled_, other->enabled_);
    std::swap(autonomous_, other->autonomous_);
    std::swap(fms_attached_, other->fms_attached_);
    std::swap(resync_, other->resync_);
    std::swap(crio_checksum_, other->crio_checksum_);
    std::swap(fpga_checksum_, other->fpga_checksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonControlData_ControlFlags::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonControlData_ControlFlags_descriptor_;
  metadata.reflection = CommonControlData_ControlFlags_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommonControlData_Joystick::kAxis1FieldNumber;
const int CommonControlData_Joystick::kAxis2FieldNumber;
const int CommonControlData_Joystick::kAxis3FieldNumber;
const int CommonControlData_Joystick::kAxis4FieldNumber;
const int CommonControlData_Joystick::kAxis5FieldNumber;
const int CommonControlData_Joystick::kAxis6FieldNumber;
const int CommonControlData_Joystick::kButtonsFieldNumber;
#endif  // !_MSC_VER

CommonControlData_Joystick::CommonControlData_Joystick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonControlData_Joystick::InitAsDefaultInstance() {
}

CommonControlData_Joystick::CommonControlData_Joystick(const CommonControlData_Joystick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonControlData_Joystick::SharedCtor() {
  _cached_size_ = 0;
  axis1_ = 0;
  axis2_ = 0;
  axis3_ = 0;
  axis4_ = 0;
  axis5_ = 0;
  axis6_ = 0;
  buttons_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonControlData_Joystick::~CommonControlData_Joystick() {
  SharedDtor();
}

void CommonControlData_Joystick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonControlData_Joystick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonControlData_Joystick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonControlData_Joystick_descriptor_;
}

const CommonControlData_Joystick& CommonControlData_Joystick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frccomm_2eproto();  return *default_instance_;
}

CommonControlData_Joystick* CommonControlData_Joystick::default_instance_ = NULL;

CommonControlData_Joystick* CommonControlData_Joystick::New() const {
  return new CommonControlData_Joystick;
}

void CommonControlData_Joystick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    axis1_ = 0;
    axis2_ = 0;
    axis3_ = 0;
    axis4_ = 0;
    axis5_ = 0;
    axis6_ = 0;
    buttons_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonControlData_Joystick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 axis1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &axis1_)));
          set_has_axis1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_axis2;
        break;
      }
      
      // optional sint32 axis2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axis2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &axis2_)));
          set_has_axis2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_axis3;
        break;
      }
      
      // optional sint32 axis3 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axis3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &axis3_)));
          set_has_axis3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_axis4;
        break;
      }
      
      // optional sint32 axis4 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axis4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &axis4_)));
          set_has_axis4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_axis5;
        break;
      }
      
      // optional sint32 axis5 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axis5:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &axis5_)));
          set_has_axis5();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_axis6;
        break;
      }
      
      // optional sint32 axis6 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_axis6:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &axis6_)));
          set_has_axis6();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_buttons;
        break;
      }
      
      // optional uint32 buttons = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buttons:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buttons_)));
          set_has_buttons();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonControlData_Joystick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 axis1 = 1;
  if (has_axis1()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(1, this->axis1(), output);
  }
  
  // optional sint32 axis2 = 2;
  if (has_axis2()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(2, this->axis2(), output);
  }
  
  // optional sint32 axis3 = 3;
  if (has_axis3()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(3, this->axis3(), output);
  }
  
  // optional sint32 axis4 = 4;
  if (has_axis4()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(4, this->axis4(), output);
  }
  
  // optional sint32 axis5 = 5;
  if (has_axis5()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(5, this->axis5(), output);
  }
  
  // optional sint32 axis6 = 6;
  if (has_axis6()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(6, this->axis6(), output);
  }
  
  // optional uint32 buttons = 7;
  if (has_buttons()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->buttons(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonControlData_Joystick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 axis1 = 1;
  if (has_axis1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(1, this->axis1(), target);
  }
  
  // optional sint32 axis2 = 2;
  if (has_axis2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(2, this->axis2(), target);
  }
  
  // optional sint32 axis3 = 3;
  if (has_axis3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(3, this->axis3(), target);
  }
  
  // optional sint32 axis4 = 4;
  if (has_axis4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(4, this->axis4(), target);
  }
  
  // optional sint32 axis5 = 5;
  if (has_axis5()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(5, this->axis5(), target);
  }
  
  // optional sint32 axis6 = 6;
  if (has_axis6()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(6, this->axis6(), target);
  }
  
  // optional uint32 buttons = 7;
  if (has_buttons()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->buttons(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonControlData_Joystick::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 axis1 = 1;
    if (has_axis1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->axis1());
    }
    
    // optional sint32 axis2 = 2;
    if (has_axis2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->axis2());
    }
    
    // optional sint32 axis3 = 3;
    if (has_axis3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->axis3());
    }
    
    // optional sint32 axis4 = 4;
    if (has_axis4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->axis4());
    }
    
    // optional sint32 axis5 = 5;
    if (has_axis5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->axis5());
    }
    
    // optional sint32 axis6 = 6;
    if (has_axis6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->axis6());
    }
    
    // optional uint32 buttons = 7;
    if (has_buttons()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buttons());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonControlData_Joystick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonControlData_Joystick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonControlData_Joystick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonControlData_Joystick::MergeFrom(const CommonControlData_Joystick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_axis1()) {
      set_axis1(from.axis1());
    }
    if (from.has_axis2()) {
      set_axis2(from.axis2());
    }
    if (from.has_axis3()) {
      set_axis3(from.axis3());
    }
    if (from.has_axis4()) {
      set_axis4(from.axis4());
    }
    if (from.has_axis5()) {
      set_axis5(from.axis5());
    }
    if (from.has_axis6()) {
      set_axis6(from.axis6());
    }
    if (from.has_buttons()) {
      set_buttons(from.buttons());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonControlData_Joystick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonControlData_Joystick::CopyFrom(const CommonControlData_Joystick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonControlData_Joystick::IsInitialized() const {
  
  return true;
}

void CommonControlData_Joystick::Swap(CommonControlData_Joystick* other) {
  if (other != this) {
    std::swap(axis1_, other->axis1_);
    std::swap(axis2_, other->axis2_);
    std::swap(axis3_, other->axis3_);
    std::swap(axis4_, other->axis4_);
    std::swap(axis5_, other->axis5_);
    std::swap(axis6_, other->axis6_);
    std::swap(buttons_, other->buttons_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonControlData_Joystick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonControlData_Joystick_descriptor_;
  metadata.reflection = CommonControlData_Joystick_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int CommonControlData::kPacketIndexFieldNumber;
const int CommonControlData::kControlFieldNumber;
const int CommonControlData::kTeamIdFieldNumber;
const int CommonControlData::kDsIdAllianceFieldNumber;
const int CommonControlData::kDsIdPositionFieldNumber;
const int CommonControlData::kStick0FieldNumber;
const int CommonControlData::kStick1FieldNumber;
const int CommonControlData::kStick2FieldNumber;
const int CommonControlData::kStick3FieldNumber;
const int CommonControlData::kVersionFieldNumber;
const int CommonControlData::kDsDigitalInFieldNumber;
const int CommonControlData::kAnalog1FieldNumber;
const int CommonControlData::kAnalog2FieldNumber;
const int CommonControlData::kAnalog3FieldNumber;
const int CommonControlData::kAnalog4FieldNumber;
const int CommonControlData::kCrioChecksumFieldNumber;
const int CommonControlData::kFpgaChecksum1FieldNumber;
const int CommonControlData::kFpgaChecksum2FieldNumber;
const int CommonControlData::kFpgaChecksum3FieldNumber;
const int CommonControlData::kFpgaChecksum4FieldNumber;
#endif  // !_MSC_VER

CommonControlData::CommonControlData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonControlData::InitAsDefaultInstance() {
  control_ = const_cast< ::nc::frccomm::CommonControlData_ControlFlags*>(&::nc::frccomm::CommonControlData_ControlFlags::default_instance());
  stick0_ = const_cast< ::nc::frccomm::CommonControlData_Joystick*>(&::nc::frccomm::CommonControlData_Joystick::default_instance());
  stick1_ = const_cast< ::nc::frccomm::CommonControlData_Joystick*>(&::nc::frccomm::CommonControlData_Joystick::default_instance());
  stick2_ = const_cast< ::nc::frccomm::CommonControlData_Joystick*>(&::nc::frccomm::CommonControlData_Joystick::default_instance());
  stick3_ = const_cast< ::nc::frccomm::CommonControlData_Joystick*>(&::nc::frccomm::CommonControlData_Joystick::default_instance());
}

CommonControlData::CommonControlData(const CommonControlData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonControlData::SharedCtor() {
  _cached_size_ = 0;
  packet_index_ = 0u;
  control_ = NULL;
  team_id_ = 0u;
  ds_id_alliance_ = 0u;
  ds_id_position_ = 0u;
  stick0_ = NULL;
  stick1_ = NULL;
  stick2_ = NULL;
  stick3_ = NULL;
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ds_digital_in_ = 0u;
  analog1_ = 0u;
  analog2_ = 0u;
  analog3_ = 0u;
  analog4_ = 0u;
  crio_checksum_ = GOOGLE_ULONGLONG(0);
  fpga_checksum1_ = 0u;
  fpga_checksum2_ = 0u;
  fpga_checksum3_ = 0u;
  fpga_checksum4_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonControlData::~CommonControlData() {
  SharedDtor();
}

void CommonControlData::SharedDtor() {
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (this != default_instance_) {
    delete control_;
    delete stick0_;
    delete stick1_;
    delete stick2_;
    delete stick3_;
  }
}

void CommonControlData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonControlData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonControlData_descriptor_;
}

const CommonControlData& CommonControlData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frccomm_2eproto();  return *default_instance_;
}

CommonControlData* CommonControlData::default_instance_ = NULL;

CommonControlData* CommonControlData::New() const {
  return new CommonControlData;
}

void CommonControlData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packet_index_ = 0u;
    if (has_control()) {
      if (control_ != NULL) control_->::nc::frccomm::CommonControlData_ControlFlags::Clear();
    }
    team_id_ = 0u;
    ds_id_alliance_ = 0u;
    ds_id_position_ = 0u;
    if (has_stick0()) {
      if (stick0_ != NULL) stick0_->::nc::frccomm::CommonControlData_Joystick::Clear();
    }
    if (has_stick1()) {
      if (stick1_ != NULL) stick1_->::nc::frccomm::CommonControlData_Joystick::Clear();
    }
    if (has_stick2()) {
      if (stick2_ != NULL) stick2_->::nc::frccomm::CommonControlData_Joystick::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_stick3()) {
      if (stick3_ != NULL) stick3_->::nc::frccomm::CommonControlData_Joystick::Clear();
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    ds_digital_in_ = 0u;
    analog1_ = 0u;
    analog2_ = 0u;
    analog3_ = 0u;
    analog4_ = 0u;
    crio_checksum_ = GOOGLE_ULONGLONG(0);
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    fpga_checksum1_ = 0u;
    fpga_checksum2_ = 0u;
    fpga_checksum3_ = 0u;
    fpga_checksum4_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonControlData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 packet_index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packet_index_)));
          set_has_packet_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_control;
        break;
      }
      
      // required .nc.frccomm.CommonControlData.ControlFlags control = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_team_id;
        break;
      }
      
      // optional uint32 team_id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_team_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &team_id_)));
          set_has_team_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ds_id_alliance;
        break;
      }
      
      // optional uint32 ds_id_alliance = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ds_id_alliance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ds_id_alliance_)));
          set_has_ds_id_alliance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ds_id_position;
        break;
      }
      
      // optional uint32 ds_id_position = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ds_id_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ds_id_position_)));
          set_has_ds_id_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_stick0;
        break;
      }
      
      // optional .nc.frccomm.CommonControlData.Joystick stick0 = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stick0:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stick0()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_stick1;
        break;
      }
      
      // optional .nc.frccomm.CommonControlData.Joystick stick1 = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stick1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stick1()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_stick2;
        break;
      }
      
      // optional .nc.frccomm.CommonControlData.Joystick stick2 = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stick2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stick2()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_stick3;
        break;
      }
      
      // optional .nc.frccomm.CommonControlData.Joystick stick3 = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stick3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stick3()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_version;
        break;
      }
      
      // optional string version = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ds_digital_in;
        break;
      }
      
      // optional uint32 ds_digital_in = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ds_digital_in:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ds_digital_in_)));
          set_has_ds_digital_in();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_analog1;
        break;
      }
      
      // optional uint32 analog1 = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analog1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analog1_)));
          set_has_analog1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_analog2;
        break;
      }
      
      // optional uint32 analog2 = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analog2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analog2_)));
          set_has_analog2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_analog3;
        break;
      }
      
      // optional uint32 analog3 = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analog3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analog3_)));
          set_has_analog3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_analog4;
        break;
      }
      
      // optional uint32 analog4 = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_analog4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &analog4_)));
          set_has_analog4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_crio_checksum;
        break;
      }
      
      // optional uint64 crio_checksum = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crio_checksum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &crio_checksum_)));
          set_has_crio_checksum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fpga_checksum1;
        break;
      }
      
      // optional uint32 fpga_checksum1 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fpga_checksum1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpga_checksum1_)));
          set_has_fpga_checksum1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_fpga_checksum2;
        break;
      }
      
      // optional uint32 fpga_checksum2 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fpga_checksum2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpga_checksum2_)));
          set_has_fpga_checksum2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_fpga_checksum3;
        break;
      }
      
      // optional uint32 fpga_checksum3 = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fpga_checksum3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpga_checksum3_)));
          set_has_fpga_checksum3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_fpga_checksum4;
        break;
      }
      
      // optional uint32 fpga_checksum4 = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fpga_checksum4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fpga_checksum4_)));
          set_has_fpga_checksum4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonControlData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 packet_index = 1;
  if (has_packet_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->packet_index(), output);
  }
  
  // required .nc.frccomm.CommonControlData.ControlFlags control = 2;
  if (has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->control(), output);
  }
  
  // optional uint32 team_id = 3;
  if (has_team_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->team_id(), output);
  }
  
  // optional uint32 ds_id_alliance = 4;
  if (has_ds_id_alliance()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->ds_id_alliance(), output);
  }
  
  // optional uint32 ds_id_position = 5;
  if (has_ds_id_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ds_id_position(), output);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick0 = 6;
  if (has_stick0()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stick0(), output);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick1 = 7;
  if (has_stick1()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->stick1(), output);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick2 = 8;
  if (has_stick2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->stick2(), output);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick3 = 9;
  if (has_stick3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->stick3(), output);
  }
  
  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->version(), output);
  }
  
  // optional uint32 ds_digital_in = 16;
  if (has_ds_digital_in()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->ds_digital_in(), output);
  }
  
  // optional uint32 analog1 = 17;
  if (has_analog1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->analog1(), output);
  }
  
  // optional uint32 analog2 = 18;
  if (has_analog2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(18, this->analog2(), output);
  }
  
  // optional uint32 analog3 = 19;
  if (has_analog3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(19, this->analog3(), output);
  }
  
  // optional uint32 analog4 = 20;
  if (has_analog4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(20, this->analog4(), output);
  }
  
  // optional uint64 crio_checksum = 21;
  if (has_crio_checksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(21, this->crio_checksum(), output);
  }
  
  // optional uint32 fpga_checksum1 = 22;
  if (has_fpga_checksum1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(22, this->fpga_checksum1(), output);
  }
  
  // optional uint32 fpga_checksum2 = 23;
  if (has_fpga_checksum2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(23, this->fpga_checksum2(), output);
  }
  
  // optional uint32 fpga_checksum3 = 24;
  if (has_fpga_checksum3()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->fpga_checksum3(), output);
  }
  
  // optional uint32 fpga_checksum4 = 25;
  if (has_fpga_checksum4()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->fpga_checksum4(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonControlData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 packet_index = 1;
  if (has_packet_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->packet_index(), target);
  }
  
  // required .nc.frccomm.CommonControlData.ControlFlags control = 2;
  if (has_control()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->control(), target);
  }
  
  // optional uint32 team_id = 3;
  if (has_team_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->team_id(), target);
  }
  
  // optional uint32 ds_id_alliance = 4;
  if (has_ds_id_alliance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->ds_id_alliance(), target);
  }
  
  // optional uint32 ds_id_position = 5;
  if (has_ds_id_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ds_id_position(), target);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick0 = 6;
  if (has_stick0()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stick0(), target);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick1 = 7;
  if (has_stick1()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->stick1(), target);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick2 = 8;
  if (has_stick2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->stick2(), target);
  }
  
  // optional .nc.frccomm.CommonControlData.Joystick stick3 = 9;
  if (has_stick3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->stick3(), target);
  }
  
  // optional string version = 10;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->version(), target);
  }
  
  // optional uint32 ds_digital_in = 16;
  if (has_ds_digital_in()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->ds_digital_in(), target);
  }
  
  // optional uint32 analog1 = 17;
  if (has_analog1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->analog1(), target);
  }
  
  // optional uint32 analog2 = 18;
  if (has_analog2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(18, this->analog2(), target);
  }
  
  // optional uint32 analog3 = 19;
  if (has_analog3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(19, this->analog3(), target);
  }
  
  // optional uint32 analog4 = 20;
  if (has_analog4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(20, this->analog4(), target);
  }
  
  // optional uint64 crio_checksum = 21;
  if (has_crio_checksum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(21, this->crio_checksum(), target);
  }
  
  // optional uint32 fpga_checksum1 = 22;
  if (has_fpga_checksum1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(22, this->fpga_checksum1(), target);
  }
  
  // optional uint32 fpga_checksum2 = 23;
  if (has_fpga_checksum2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(23, this->fpga_checksum2(), target);
  }
  
  // optional uint32 fpga_checksum3 = 24;
  if (has_fpga_checksum3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->fpga_checksum3(), target);
  }
  
  // optional uint32 fpga_checksum4 = 25;
  if (has_fpga_checksum4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->fpga_checksum4(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonControlData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 packet_index = 1;
    if (has_packet_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->packet_index());
    }
    
    // required .nc.frccomm.CommonControlData.ControlFlags control = 2;
    if (has_control()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->control());
    }
    
    // optional uint32 team_id = 3;
    if (has_team_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->team_id());
    }
    
    // optional uint32 ds_id_alliance = 4;
    if (has_ds_id_alliance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ds_id_alliance());
    }
    
    // optional uint32 ds_id_position = 5;
    if (has_ds_id_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ds_id_position());
    }
    
    // optional .nc.frccomm.CommonControlData.Joystick stick0 = 6;
    if (has_stick0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stick0());
    }
    
    // optional .nc.frccomm.CommonControlData.Joystick stick1 = 7;
    if (has_stick1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stick1());
    }
    
    // optional .nc.frccomm.CommonControlData.Joystick stick2 = 8;
    if (has_stick2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stick2());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .nc.frccomm.CommonControlData.Joystick stick3 = 9;
    if (has_stick3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stick3());
    }
    
    // optional string version = 10;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }
    
    // optional uint32 ds_digital_in = 16;
    if (has_ds_digital_in()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ds_digital_in());
    }
    
    // optional uint32 analog1 = 17;
    if (has_analog1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analog1());
    }
    
    // optional uint32 analog2 = 18;
    if (has_analog2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analog2());
    }
    
    // optional uint32 analog3 = 19;
    if (has_analog3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analog3());
    }
    
    // optional uint32 analog4 = 20;
    if (has_analog4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->analog4());
    }
    
    // optional uint64 crio_checksum = 21;
    if (has_crio_checksum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->crio_checksum());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 fpga_checksum1 = 22;
    if (has_fpga_checksum1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpga_checksum1());
    }
    
    // optional uint32 fpga_checksum2 = 23;
    if (has_fpga_checksum2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpga_checksum2());
    }
    
    // optional uint32 fpga_checksum3 = 24;
    if (has_fpga_checksum3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpga_checksum3());
    }
    
    // optional uint32 fpga_checksum4 = 25;
    if (has_fpga_checksum4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fpga_checksum4());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonControlData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonControlData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonControlData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonControlData::MergeFrom(const CommonControlData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packet_index()) {
      set_packet_index(from.packet_index());
    }
    if (from.has_control()) {
      mutable_control()->::nc::frccomm::CommonControlData_ControlFlags::MergeFrom(from.control());
    }
    if (from.has_team_id()) {
      set_team_id(from.team_id());
    }
    if (from.has_ds_id_alliance()) {
      set_ds_id_alliance(from.ds_id_alliance());
    }
    if (from.has_ds_id_position()) {
      set_ds_id_position(from.ds_id_position());
    }
    if (from.has_stick0()) {
      mutable_stick0()->::nc::frccomm::CommonControlData_Joystick::MergeFrom(from.stick0());
    }
    if (from.has_stick1()) {
      mutable_stick1()->::nc::frccomm::CommonControlData_Joystick::MergeFrom(from.stick1());
    }
    if (from.has_stick2()) {
      mutable_stick2()->::nc::frccomm::CommonControlData_Joystick::MergeFrom(from.stick2());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_stick3()) {
      mutable_stick3()->::nc::frccomm::CommonControlData_Joystick::MergeFrom(from.stick3());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_ds_digital_in()) {
      set_ds_digital_in(from.ds_digital_in());
    }
    if (from.has_analog1()) {
      set_analog1(from.analog1());
    }
    if (from.has_analog2()) {
      set_analog2(from.analog2());
    }
    if (from.has_analog3()) {
      set_analog3(from.analog3());
    }
    if (from.has_analog4()) {
      set_analog4(from.analog4());
    }
    if (from.has_crio_checksum()) {
      set_crio_checksum(from.crio_checksum());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_fpga_checksum1()) {
      set_fpga_checksum1(from.fpga_checksum1());
    }
    if (from.has_fpga_checksum2()) {
      set_fpga_checksum2(from.fpga_checksum2());
    }
    if (from.has_fpga_checksum3()) {
      set_fpga_checksum3(from.fpga_checksum3());
    }
    if (from.has_fpga_checksum4()) {
      set_fpga_checksum4(from.fpga_checksum4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonControlData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonControlData::CopyFrom(const CommonControlData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonControlData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void CommonControlData::Swap(CommonControlData* other) {
  if (other != this) {
    std::swap(packet_index_, other->packet_index_);
    std::swap(control_, other->control_);
    std::swap(team_id_, other->team_id_);
    std::swap(ds_id_alliance_, other->ds_id_alliance_);
    std::swap(ds_id_position_, other->ds_id_position_);
    std::swap(stick0_, other->stick0_);
    std::swap(stick1_, other->stick1_);
    std::swap(stick2_, other->stick2_);
    std::swap(stick3_, other->stick3_);
    std::swap(version_, other->version_);
    std::swap(ds_digital_in_, other->ds_digital_in_);
    std::swap(analog1_, other->analog1_);
    std::swap(analog2_, other->analog2_);
    std::swap(analog3_, other->analog3_);
    std::swap(analog4_, other->analog4_);
    std::swap(crio_checksum_, other->crio_checksum_);
    std::swap(fpga_checksum1_, other->fpga_checksum1_);
    std::swap(fpga_checksum2_, other->fpga_checksum2_);
    std::swap(fpga_checksum3_, other->fpga_checksum3_);
    std::swap(fpga_checksum4_, other->fpga_checksum4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonControlData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonControlData_descriptor_;
  metadata.reflection = CommonControlData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StatusData::kBatteryFieldNumber;
const int StatusData::kUpdateNumFieldNumber;
const int StatusData::kDataHighLenFieldNumber;
const int StatusData::kDataHighFieldNumber;
const int StatusData::kDataLowLenFieldNumber;
const int StatusData::kDataLowFieldNumber;
const int StatusData::kDsDigitalOutFieldNumber;
#endif  // !_MSC_VER

StatusData::StatusData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StatusData::InitAsDefaultInstance() {
}

StatusData::StatusData(const StatusData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StatusData::SharedCtor() {
  _cached_size_ = 0;
  battery_ = 0;
  update_num_ = 0u;
  data_high_len_ = 0;
  data_high_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  data_low_len_ = 0;
  data_low_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ds_digital_out_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StatusData::~StatusData() {
  SharedDtor();
}

void StatusData::SharedDtor() {
  if (data_high_ != &::google::protobuf::internal::kEmptyString) {
    delete data_high_;
  }
  if (data_low_ != &::google::protobuf::internal::kEmptyString) {
    delete data_low_;
  }
  if (this != default_instance_) {
  }
}

void StatusData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StatusData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StatusData_descriptor_;
}

const StatusData& StatusData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frccomm_2eproto();  return *default_instance_;
}

StatusData* StatusData::default_instance_ = NULL;

StatusData* StatusData::New() const {
  return new StatusData;
}

void StatusData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    battery_ = 0;
    update_num_ = 0u;
    data_high_len_ = 0;
    if (has_data_high()) {
      if (data_high_ != &::google::protobuf::internal::kEmptyString) {
        data_high_->clear();
      }
    }
    data_low_len_ = 0;
    if (has_data_low()) {
      if (data_low_ != &::google::protobuf::internal::kEmptyString) {
        data_low_->clear();
      }
    }
    ds_digital_out_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StatusData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float battery = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &battery_)));
          set_has_battery();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_update_num;
        break;
      }
      
      // required uint32 update_num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_update_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_num_)));
          set_has_update_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_data_high_len;
        break;
      }
      
      // required int32 data_high_len = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_high_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_high_len_)));
          set_has_data_high_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data_high;
        break;
      }
      
      // required string data_high = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_high:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_high()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_high().data(), this->data_high().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_data_low_len;
        break;
      }
      
      // required int32 data_low_len = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_low_len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &data_low_len_)));
          set_has_data_low_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data_low;
        break;
      }
      
      // required string data_low = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data_low:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_low()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data_low().data(), this->data_low().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_ds_digital_out;
        break;
      }
      
      // optional uint32 ds_digital_out = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ds_digital_out:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ds_digital_out_)));
          set_has_ds_digital_out();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StatusData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional float battery = 1 [default = 0];
  if (has_battery()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->battery(), output);
  }
  
  // required uint32 update_num = 2;
  if (has_update_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->update_num(), output);
  }
  
  // required int32 data_high_len = 3;
  if (has_data_high_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->data_high_len(), output);
  }
  
  // required string data_high = 4;
  if (has_data_high()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_high().data(), this->data_high().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->data_high(), output);
  }
  
  // required int32 data_low_len = 5;
  if (has_data_low_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->data_low_len(), output);
  }
  
  // required string data_low = 6;
  if (has_data_low()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_low().data(), this->data_low().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->data_low(), output);
  }
  
  // optional uint32 ds_digital_out = 16;
  if (has_ds_digital_out()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->ds_digital_out(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StatusData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional float battery = 1 [default = 0];
  if (has_battery()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->battery(), target);
  }
  
  // required uint32 update_num = 2;
  if (has_update_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->update_num(), target);
  }
  
  // required int32 data_high_len = 3;
  if (has_data_high_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->data_high_len(), target);
  }
  
  // required string data_high = 4;
  if (has_data_high()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_high().data(), this->data_high().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->data_high(), target);
  }
  
  // required int32 data_low_len = 5;
  if (has_data_low_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->data_low_len(), target);
  }
  
  // required string data_low = 6;
  if (has_data_low()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data_low().data(), this->data_low().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data_low(), target);
  }
  
  // optional uint32 ds_digital_out = 16;
  if (has_ds_digital_out()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->ds_digital_out(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StatusData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional float battery = 1 [default = 0];
    if (has_battery()) {
      total_size += 1 + 4;
    }
    
    // required uint32 update_num = 2;
    if (has_update_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->update_num());
    }
    
    // required int32 data_high_len = 3;
    if (has_data_high_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_high_len());
    }
    
    // required string data_high = 4;
    if (has_data_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_high());
    }
    
    // required int32 data_low_len = 5;
    if (has_data_low_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->data_low_len());
    }
    
    // required string data_low = 6;
    if (has_data_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data_low());
    }
    
    // optional uint32 ds_digital_out = 16;
    if (has_ds_digital_out()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ds_digital_out());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StatusData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StatusData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StatusData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StatusData::MergeFrom(const StatusData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_battery()) {
      set_battery(from.battery());
    }
    if (from.has_update_num()) {
      set_update_num(from.update_num());
    }
    if (from.has_data_high_len()) {
      set_data_high_len(from.data_high_len());
    }
    if (from.has_data_high()) {
      set_data_high(from.data_high());
    }
    if (from.has_data_low_len()) {
      set_data_low_len(from.data_low_len());
    }
    if (from.has_data_low()) {
      set_data_low(from.data_low());
    }
    if (from.has_ds_digital_out()) {
      set_ds_digital_out(from.ds_digital_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StatusData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StatusData::CopyFrom(const StatusData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StatusData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003e) != 0x0000003e) return false;
  
  return true;
}

void StatusData::Swap(StatusData* other) {
  if (other != this) {
    std::swap(battery_, other->battery_);
    std::swap(update_num_, other->update_num_);
    std::swap(data_high_len_, other->data_high_len_);
    std::swap(data_high_, other->data_high_);
    std::swap(data_low_len_, other->data_low_len_);
    std::swap(data_low_, other->data_low_);
    std::swap(ds_digital_out_, other->ds_digital_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StatusData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StatusData_descriptor_;
  metadata.reflection = StatusData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ErrorData::kDataLenFieldNumber;
const int ErrorData::kErrorDataFieldNumber;
#endif  // !_MSC_VER

ErrorData::ErrorData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ErrorData::InitAsDefaultInstance() {
}

ErrorData::ErrorData(const ErrorData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ErrorData::SharedCtor() {
  _cached_size_ = 0;
  data_len_ = 0u;
  error_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ErrorData::~ErrorData() {
  SharedDtor();
}

void ErrorData::SharedDtor() {
  if (error_data_ != &::google::protobuf::internal::kEmptyString) {
    delete error_data_;
  }
  if (this != default_instance_) {
  }
}

void ErrorData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ErrorData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorData_descriptor_;
}

const ErrorData& ErrorData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frccomm_2eproto();  return *default_instance_;
}

ErrorData* ErrorData::default_instance_ = NULL;

ErrorData* ErrorData::New() const {
  return new ErrorData;
}

void ErrorData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_len_ = 0u;
    if (has_error_data()) {
      if (error_data_ != &::google::protobuf::internal::kEmptyString) {
        error_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ErrorData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_len = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error_data;
        break;
      }
      
      // required string error_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error_data().data(), this->error_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ErrorData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 data_len = 1;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_len(), output);
  }
  
  // required string error_data = 2;
  if (has_error_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_data().data(), this->error_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ErrorData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 data_len = 1;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_len(), target);
  }
  
  // required string error_data = 2;
  if (has_error_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error_data().data(), this->error_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ErrorData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_len = 1;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_len());
    }
    
    // required string error_data = 2;
    if (has_error_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ErrorData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ErrorData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ErrorData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ErrorData::MergeFrom(const ErrorData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
    if (from.has_error_data()) {
      set_error_data(from.error_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ErrorData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ErrorData::CopyFrom(const ErrorData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrorData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ErrorData::Swap(ErrorData* other) {
  if (other != this) {
    std::swap(data_len_, other->data_len_);
    std::swap(error_data_, other->error_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ErrorData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ErrorData_descriptor_;
  metadata.reflection = ErrorData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DsLcdData::kDataLenFieldNumber;
const int DsLcdData::kLcdDataFieldNumber;
#endif  // !_MSC_VER

DsLcdData::DsLcdData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DsLcdData::InitAsDefaultInstance() {
}

DsLcdData::DsLcdData(const DsLcdData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DsLcdData::SharedCtor() {
  _cached_size_ = 0;
  data_len_ = 0u;
  lcd_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DsLcdData::~DsLcdData() {
  SharedDtor();
}

void DsLcdData::SharedDtor() {
  if (lcd_data_ != &::google::protobuf::internal::kEmptyString) {
    delete lcd_data_;
  }
  if (this != default_instance_) {
  }
}

void DsLcdData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DsLcdData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DsLcdData_descriptor_;
}

const DsLcdData& DsLcdData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_frccomm_2eproto();  return *default_instance_;
}

DsLcdData* DsLcdData::default_instance_ = NULL;

DsLcdData* DsLcdData::New() const {
  return new DsLcdData;
}

void DsLcdData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    data_len_ = 0u;
    if (has_lcd_data()) {
      if (lcd_data_ != &::google::protobuf::internal::kEmptyString) {
        lcd_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DsLcdData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 data_len = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &data_len_)));
          set_has_data_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lcd_data;
        break;
      }
      
      // required string lcd_data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lcd_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lcd_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->lcd_data().data(), this->lcd_data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DsLcdData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 data_len = 1;
  if (has_data_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->data_len(), output);
  }
  
  // required string lcd_data = 2;
  if (has_lcd_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lcd_data().data(), this->lcd_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->lcd_data(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DsLcdData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 data_len = 1;
  if (has_data_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->data_len(), target);
  }
  
  // required string lcd_data = 2;
  if (has_lcd_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->lcd_data().data(), this->lcd_data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->lcd_data(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DsLcdData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 data_len = 1;
    if (has_data_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->data_len());
    }
    
    // required string lcd_data = 2;
    if (has_lcd_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lcd_data());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DsLcdData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DsLcdData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DsLcdData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DsLcdData::MergeFrom(const DsLcdData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data_len()) {
      set_data_len(from.data_len());
    }
    if (from.has_lcd_data()) {
      set_lcd_data(from.lcd_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DsLcdData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DsLcdData::CopyFrom(const DsLcdData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DsLcdData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void DsLcdData::Swap(DsLcdData* other) {
  if (other != this) {
    std::swap(data_len_, other->data_len_);
    std::swap(lcd_data_, other->lcd_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DsLcdData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DsLcdData_descriptor_;
  metadata.reflection = DsLcdData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace frccomm
}  // namespace nc

// @@protoc_insertion_point(global_scope)
