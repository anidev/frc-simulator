// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: niemb.proto

#ifndef PROTOBUF_niemb_2eproto__INCLUDED
#define PROTOBUF_niemb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace nc {
namespace niemb {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_niemb_2eproto();
void protobuf_AssignDesc_niemb_2eproto();
void protobuf_ShutdownFile_niemb_2eproto();

class User1Data;

// ===================================================================

class User1Data : public ::google::protobuf::Message {
 public:
  User1Data();
  virtual ~User1Data();
  
  User1Data(const User1Data& from);
  
  inline User1Data& operator=(const User1Data& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const User1Data& default_instance();
  
  void Swap(User1Data* other);
  
  // implements Message ----------------------------------------------
  
  User1Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const User1Data& from);
  void MergeFrom(const User1Data& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bool switch = 1;
  inline bool has_switch_() const;
  inline void clear_switch_();
  static const int kSwitchFieldNumber = 1;
  inline bool switch_() const;
  inline void set_switch_(bool value);
  
  // optional bool led = 2;
  inline bool has_led() const;
  inline void clear_led();
  static const int kLedFieldNumber = 2;
  inline bool led() const;
  inline void set_led(bool value);
  
  // @@protoc_insertion_point(class_scope:nc.niemb.User1Data)
 private:
  inline void set_has_switch_();
  inline void clear_has_switch_();
  inline void set_has_led();
  inline void clear_has_led();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  bool switch__;
  bool led_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_niemb_2eproto();
  friend void protobuf_AssignDesc_niemb_2eproto();
  friend void protobuf_ShutdownFile_niemb_2eproto();
  
  void InitAsDefaultInstance();
  static User1Data* default_instance_;
};
// ===================================================================


// ===================================================================

// User1Data

// optional bool switch = 1;
inline bool User1Data::has_switch_() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void User1Data::set_has_switch_() {
  _has_bits_[0] |= 0x00000001u;
}
inline void User1Data::clear_has_switch_() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void User1Data::clear_switch_() {
  switch__ = false;
  clear_has_switch_();
}
inline bool User1Data::switch_() const {
  return switch__;
}
inline void User1Data::set_switch_(bool value) {
  set_has_switch_();
  switch__ = value;
}

// optional bool led = 2;
inline bool User1Data::has_led() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void User1Data::set_has_led() {
  _has_bits_[0] |= 0x00000002u;
}
inline void User1Data::clear_has_led() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void User1Data::clear_led() {
  led_ = false;
  clear_has_led();
}
inline bool User1Data::led() const {
  return led_;
}
inline void User1Data::set_led(bool value) {
  set_has_led();
  led_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace niemb
}  // namespace nc

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_niemb_2eproto__INCLUDED
